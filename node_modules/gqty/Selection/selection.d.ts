export declare enum SelectionType {
    Query = 0,
    Mutation = 1,
    Subscription = 2
}
export declare type SelectionConstructorArgs = {
    id: number;
    key: string | number;
    prevSelection?: Selection;
    type?: SelectionType;
    alias?: string;
    args?: Record<string, unknown>;
    argTypes?: Record<string, string>;
    unions?: string[];
};
export declare class Selection {
    id: string;
    key: string | number;
    type: SelectionType;
    unions?: string[];
    args?: Readonly<Record<string, unknown>>;
    argTypes?: Readonly<Record<string, string>>;
    alias?: string;
    cachePath: readonly (string | number)[];
    pathString: string;
    selectionsList: readonly Selection[];
    noIndexSelections: readonly Selection[];
    prevSelection: Selection | null;
    currentCofetchSelections: Set<Selection> | null;
    constructor({ key, prevSelection, args, argTypes, type, alias, unions, id, }: SelectionConstructorArgs);
    addCofetchSelections(selections: Selection[] | Set<Selection>): void;
    get cofetchSelections(): Set<Selection> | null;
}
