'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

exports.SelectionType = void 0;
(function(SelectionType2) {
  SelectionType2[SelectionType2["Query"] = 0] = "Query";
  SelectionType2[SelectionType2["Mutation"] = 1] = "Mutation";
  SelectionType2[SelectionType2["Subscription"] = 2] = "Subscription";
})(exports.SelectionType || (exports.SelectionType = {}));
class Selection {
  constructor({
    key,
    prevSelection,
    args,
    argTypes,
    type,
    alias,
    unions,
    id
  }) {
    this.cachePath = [];
    this.prevSelection = null;
    this.currentCofetchSelections = null;
    this.id = id + "";
    this.key = key;
    const pathKey = alias || key;
    const isInterfaceUnionSelection = key === "$on";
    this.cachePath = isInterfaceUnionSelection ? (prevSelection == null ? void 0 : prevSelection.cachePath) || [] : prevSelection ? [...prevSelection.cachePath, pathKey] : [pathKey];
    this.pathString = isInterfaceUnionSelection ? (prevSelection == null ? void 0 : prevSelection.pathString) || "" : prevSelection ? prevSelection.pathString + "." + pathKey : pathKey.toString();
    const prevSelectionsList = (prevSelection == null ? void 0 : prevSelection.selectionsList) || [];
    this.selectionsList = [...prevSelectionsList, this];
    const prevNoSelectionsList = (prevSelection == null ? void 0 : prevSelection.noIndexSelections) || [];
    this.noIndexSelections = typeof key === "string" ? [...prevNoSelectionsList, this] : prevNoSelectionsList;
    if (this.selectionsList.length === this.noIndexSelections.length) {
      this.noIndexSelections = this.selectionsList;
    }
    this.alias = alias;
    this.args = args;
    this.argTypes = argTypes;
    this.unions = unions;
    this.type = type || (prevSelection == null ? void 0 : prevSelection.type) || 0;
    if (prevSelection)
      this.prevSelection = prevSelection;
  }
  addCofetchSelections(selections) {
    const cofetchSet = this.currentCofetchSelections || (this.currentCofetchSelections = new Set());
    for (const selection of selections) {
      cofetchSet.add(selection);
    }
  }
  get cofetchSelections() {
    let currentPrevSelection = this.prevSelection;
    while (currentPrevSelection) {
      const currentPrevCofetchSelections = currentPrevSelection.currentCofetchSelections;
      if (currentPrevCofetchSelections) {
        this.addCofetchSelections(currentPrevCofetchSelections);
      }
      currentPrevSelection = currentPrevSelection.prevSelection;
    }
    return this.currentCofetchSelections;
  }
}

exports.Selection = Selection;
