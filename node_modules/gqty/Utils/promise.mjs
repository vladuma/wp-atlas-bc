class PLazy extends Promise {
  constructor(_executor) {
    super((resolve) => resolve());
    this._executor = _executor;
    this.then = (onFulfilled, onRejected) => (this._promise || (this._promise = new Promise(this._executor))).then(onFulfilled, onRejected);
    this.catch = (onRejected) => (this._promise || (this._promise = new Promise(this._executor))).catch(onRejected);
    this.finally = (onFinally) => (this._promise || (this._promise = new Promise(this._executor))).finally(onFinally);
  }
}
function LazyPromise(fn) {
  return new PLazy((resolve, reject) => {
    try {
      Promise.resolve(fn()).then(resolve, (err) => {
        if (err instanceof Error && Error.captureStackTrace)
          Error.captureStackTrace(err, LazyPromise);
        reject(err);
      });
    } catch (err) {
      if (err instanceof Error && Error.captureStackTrace)
        Error.captureStackTrace(err, LazyPromise);
      reject(err);
    }
  });
}
function createDeferredPromise(timeoutTime) {
  const resolve = (value) => {
    timeout != null && clearTimeout(timeout);
    valueRef.current || (valueRef.current = { status: "fulfilled", value });
    middlePromiseResolve({
      value,
      resolved: true
    });
  };
  const reject = (err) => {
    timeout != null && clearTimeout(timeout);
    valueRef.current || (valueRef.current = { status: "rejected", reason: err });
    middlePromiseResolve({
      value: err,
      resolved: false
    });
  };
  const valueRef = {};
  let middlePromiseResolve;
  const MiddlePromise = new Promise((resolve2) => {
    middlePromiseResolve = resolve2;
  });
  const promise = LazyPromise(async () => {
    const { resolved, value } = await MiddlePromise;
    if (resolved)
      return value;
    throw value;
  });
  let timeout;
  if (timeoutTime != null) {
    timeout = setTimeout(() => {
      reject(Error(`Timed out after ${timeoutTime}ms.`));
    }, timeoutTime);
  }
  return {
    promise,
    resolve,
    reject,
    value: valueRef
  };
}

export { LazyPromise, PLazy, createDeferredPromise };
