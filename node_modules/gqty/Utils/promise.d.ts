export declare class PLazy<ValueType> extends Promise<ValueType> {
    private _executor;
    private _promise?;
    constructor(_executor: (resolve: (value: ValueType) => void, reject: (err: unknown) => void) => void);
    then: Promise<ValueType>['then'];
    catch: Promise<ValueType>['catch'];
    finally: Promise<ValueType>['finally'];
}
export declare function LazyPromise<Value>(fn: () => Value | Promise<Value>): Promise<Value>;
export interface DeferredPromise<T> {
    promise: Promise<T>;
    resolve: (value: T) => void;
    reject: (reason: unknown) => void;
    value: {
        current?: PromiseSettledResult<T>;
    };
}
export declare function createDeferredPromise<T = void>(timeoutTime?: number): DeferredPromise<T>;
