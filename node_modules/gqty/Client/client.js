'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index$4 = require('../Accessor/index.js');
const accessorCache = require('../Cache/accessorCache.js');
const dataCache = require('../Cache/dataCache.js');
const persistence = require('../Cache/persistence.js');
const index$5 = require('../Error/index.js');
const index$1 = require('../Events/index.js');
const prefetch = require('../Helpers/prefetch.js');
const refetch = require('../Helpers/refetch.js');
const ssr = require('../Helpers/ssr.js');
const index = require('../Interceptor/index.js');
const index$2 = require('../Normalization/index.js');
const index$3 = require('../Scheduler/index.js');
const SelectionManager = require('../Selection/SelectionManager.js');
const resolvers = require('./resolvers.js');
const track = require('../Helpers/track.js');

function createClient({
  schema,
  scalarsEnumsHash,
  queryFetcher,
  catchSelectionsTimeMS = 10,
  retry,
  normalization = true,
  subscriptionsClient,
  defaults = {},
  depthLimit = 15
}) {
  const interceptorManager = index.createInterceptorManager();
  const { globalInterceptor } = interceptorManager;
  const accessorCache$1 = accessorCache.createAccessorCache();
  const eventHandler = new index$1.EventHandler();
  const normalizationHandler = index$2.createNormalizationHandler(normalization, eventHandler, schema, scalarsEnumsHash);
  const clientCache = dataCache.createCache(normalizationHandler);
  const selectionManager = SelectionManager.createSelectionManager();
  const scheduler = index$3.createScheduler(interceptorManager, resolveSchedulerSelections, catchSelectionsTimeMS);
  const innerState = {
    allowCache: true,
    foundValidCache: true,
    clientCache,
    accessorCache: accessorCache$1,
    selectionManager,
    interceptorManager,
    schema,
    scalarsEnumsHash,
    scheduler,
    eventHandler,
    queryFetcher,
    schemaUnions: index$4.createSchemaUnions(schema),
    normalizationHandler,
    defaults,
    depthLimit
  };
  const {
    resolved,
    buildAndFetchSelections,
    resolveSelections,
    inlineResolved
  } = resolvers.createResolvers(innerState, catchSelectionsTimeMS, subscriptionsClient);
  async function resolveSchedulerSelections(selections) {
    const resolvingPromise = scheduler.resolving;
    const resolvePromise = resolveSelections(selections, void 0, {
      retry: retry === void 0 ? true : retry,
      scheduler: true
    });
    globalInterceptor.removeSelections(selections);
    try {
      await resolvePromise;
    } catch (error) {
      if (resolvingPromise) {
        resolvingPromise.resolve({
          error,
          selections
        });
      }
    }
  }
  const refetch$1 = refetch.createRefetch(innerState, resolveSelections, inlineResolved);
  const { query, mutation, subscription, setCache, assignSelections } = index$4.createAccessorCreators(innerState);
  const ssrHelpers = ssr.createSSRHelpers({
    innerState,
    query,
    refetch: refetch$1
  });
  async function mutate(fn, opts = {}) {
    var _a, _b;
    try {
      const data = await resolved(() => fn(mutation), {
        refetch: true
      });
      (_a = opts.onComplete) == null ? void 0 : _a.call(opts, data, {
        query,
        setCache,
        assignSelections
      });
      return data;
    } catch (err) {
      const error = index$5.GQtyError.create(err, mutate);
      (_b = opts.onError) == null ? void 0 : _b.call(opts, error, {
        query,
        setCache,
        assignSelections
      });
      throw error;
    }
  }
  const prefetch$1 = prefetch.createPrefetch(query, innerState);
  const persistenceHelpers = persistence.createPersistenceHelpers(clientCache, selectionManager);
  const tracker = track.createTracker(innerState, subscriptionsClient);
  return {
    query,
    mutation,
    subscription,
    resolved,
    inlineResolved,
    cache: innerState.clientCache.cache,
    interceptorManager,
    scheduler,
    refetch: refetch$1,
    accessorCache: accessorCache$1,
    buildAndFetchSelections,
    eventHandler,
    setCache,
    ...ssrHelpers,
    assignSelections,
    mutate,
    subscriptionsClient,
    prefetch: prefetch$1,
    ...persistenceHelpers,
    ...tracker
  };
}

exports.createClient = createClient;
