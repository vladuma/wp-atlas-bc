import type { Selection } from '../Selection';
import { PlainObject } from '../Utils';
import type { NormalizationHandler } from '../Normalization';
export declare type CacheType = {
    query?: Record<string, unknown>;
    mutation?: Record<string, unknown>;
    subscription?: Record<string, unknown>;
};
export interface CacheInstance {
    cache: CacheType;
    getCacheFromSelection: {
        <Value = unknown>(selection: Selection): undefined | Value;
        <Value = unknown, NotFound = undefined>(selection: Selection, defaultValue: NotFound): Value | NotFound;
    };
    setCacheFromSelection: (selection: Selection, value: unknown) => void;
    mergeCache: (data: Record<string, unknown>, prefix: 'query' | 'mutation' | 'subscription') => void;
    normalizedCache: Record<string, PlainObject | undefined> | undefined;
}
export declare function createCache(normalization?: NormalizationHandler): CacheInstance;
