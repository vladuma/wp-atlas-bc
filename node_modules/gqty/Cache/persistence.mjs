import { isPlainObject } from '../Utils/object.mjs';
import { decycle, retrocycle } from '../Utils/cycle.mjs';
import 'lodash/mergeWith.js';

function createPersistenceHelpers(clientCache, selectionManager) {
  function backupPersistence(version) {
    const { query } = clientCache.cache;
    const cache = decycle({ query });
    const selections = selectionManager.backup();
    return JSON.stringify({
      version,
      cache,
      selections
    });
  }
  function restorePersistence(backup, expectedVersion) {
    if (typeof backup === "function") {
      return new Promise((resolve) => {
        backup().then((value) => resolve(restore(value))).catch(() => resolve(false));
      });
    }
    return restore(backup);
    function restore(backup2) {
      if (typeof backup2 !== "string")
        return false;
      const backupObject = JSON.parse(backup2);
      if (isPlainObject(backupObject) && isPlainObject(backupObject.cache)) {
        if (expectedVersion && !backupObject.version || backupObject.version && !expectedVersion) {
          return false;
        }
        if (expectedVersion && backupObject.version) {
          if (typeof backupObject.version === "string") {
            if (backupObject.version !== expectedVersion) {
              return false;
            }
          } else {
            return false;
          }
        }
        Object.assign(clientCache.cache, retrocycle(backupObject.cache));
        selectionManager.restore(backupObject.selections);
        return true;
      }
      return false;
    }
  }
  return {
    backupPersistence,
    restorePersistence
  };
}

export { createPersistenceHelpers };
