'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const object = require('../Utils/object.js');
const mergeWith = require('lodash/mergeWith.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const mergeWith__default = /*#__PURE__*/_interopDefaultLegacy(mergeWith);

function createCache(normalization) {
  const cache = {};
  function getCacheFromSelection(selection, notFoundValue = void 0) {
    return normalization ? normalization.getCacheFromSelection(selection, notFoundValue, cache) : object.get(cache, selection.cachePath, notFoundValue);
  }
  function setCacheFromSelection(selection, value) {
    if (normalization && object.isObject(value))
      normalization.scanNormalizedObjects(value);
    object.set(cache, selection.cachePath, value);
  }
  function onObjectMergeConflict(currentValue, incomingValue) {
    const result = normalization == null ? void 0 : normalization.onObjectMergeConflict(currentValue, incomingValue);
    if (result)
      return result;
    if (Array.isArray(currentValue) && Array.isArray(incomingValue) && currentValue.length !== incomingValue.length) {
      return incomingValue;
    }
  }
  function mergeCache(data, prefix) {
    normalization == null ? void 0 : normalization.scanNormalizedObjects(data);
    mergeWith__default["default"](cache, { [prefix]: data }, onObjectMergeConflict);
  }
  return {
    cache,
    getCacheFromSelection,
    setCacheFromSelection,
    mergeCache,
    normalizedCache: normalization == null ? void 0 : normalization.normalizedCache
  };
}

exports.createCache = createCache;
