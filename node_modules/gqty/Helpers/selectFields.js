'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const object = require('../Utils/object.js');
require('lodash/mergeWith.js');

function selectFields(accessor, fields = "*", recursionDepth = 1) {
  if (accessor == null)
    return accessor;
  if (Array.isArray(accessor)) {
    return accessor.map((value) => selectFields(value, fields, recursionDepth));
  }
  if (!object.isObject(accessor))
    return accessor;
  if (fields.length === 0) {
    return {};
  }
  if (typeof fields === "string") {
    if (recursionDepth > 0) {
      const allAccessorKeys = Object.keys(accessor);
      return allAccessorKeys.reduce((acum, fieldName) => {
        const fieldValue = object.get(accessor, fieldName);
        if (Array.isArray(fieldValue)) {
          object.set(acum, fieldName, fieldValue.map((value) => {
            return selectFields(value, "*", recursionDepth - 1);
          }));
        } else if (object.isObject(fieldValue)) {
          object.set(acum, fieldName, selectFields(fieldValue, "*", recursionDepth - 1));
        } else {
          object.set(acum, fieldName, fieldValue);
        }
        return acum;
      }, {});
    } else {
      return null;
    }
  }
  return fields.reduce((acum, fieldName) => {
    const fieldValue = object.get(accessor, fieldName);
    if (fieldValue === void 0)
      return acum;
    if (Array.isArray(fieldValue)) {
      object.set(acum, fieldName, fieldValue.map((value) => {
        return selectFields(value, "*", recursionDepth);
      }));
    } else if (object.isObject(fieldValue)) {
      object.set(acum, fieldName, selectFields(fieldValue, "*", recursionDepth));
    } else {
      object.set(acum, fieldName, fieldValue);
    }
    return acum;
  }, {});
}

exports.selectFields = selectFields;
