import { GQtyError } from '../Error';
import type { Selection } from '../Selection';
import type { InnerClientState, SubscriptionsClient } from '../Client';
export declare type TrackCallType = 'initial' | 'cache_change';
export interface TrackCallInfo {
    type: TrackCallType;
}
export interface TrackOptions {
    onError?: ((err: GQtyError) => void) | undefined;
    /**
     * Refetch on initial call
     */
    refetch?: boolean;
}
export interface Track {
    <TData>(callback: (info: TrackCallInfo) => TData, options?: TrackOptions): {
        stop: () => void;
        selections: Set<Selection>;
        data: {
            current: TData | undefined;
        };
    };
}
export declare function createTracker(innerState: InnerClientState, subscriptionsClient: SubscriptionsClient | undefined): {
    track: Track;
};
