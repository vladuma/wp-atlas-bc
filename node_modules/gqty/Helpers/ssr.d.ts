import type { ProxyAccessor } from '../Cache';
import type { InnerClientState, Refetch } from '../Client/client';
export interface HydrateCacheOptions {
    /**
     * Cache snapshot, returned from `prepareRender`
     */
    cacheSnapshot: string;
    /**
     * If it should refetch everything after
     *
     * Specify a number greater than `0` to delay the refetch that amount in ms
     *
     * @default
     * false
     */
    shouldRefetch?: boolean | number;
}
export interface HydrateCache {
    ({ cacheSnapshot, shouldRefetch }: HydrateCacheOptions): void;
}
export interface PrepareRender {
    (render: () => Promise<void> | void): Promise<{
        cacheSnapshot: string;
    }>;
}
export interface SSRHelpers {
    hydrateCache: HydrateCache;
    prepareRender: PrepareRender;
}
export declare function createSSRHelpers({ query, refetch, innerState, }: {
    query: ProxyAccessor;
    refetch: Refetch;
    innerState: InnerClientState;
}): SSRHelpers;
