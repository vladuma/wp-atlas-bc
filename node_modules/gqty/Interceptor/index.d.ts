import type { Selection } from '../Selection';
export declare class Interceptor {
    fetchSelections: Set<Selection>;
    listening: boolean;
    selectionAddListeners: Set<(selection: Selection) => void>;
    selectionCacheListeners: Set<(selection: Selection) => void>;
    selectionCacheRefetchListeners: Set<(selection: Selection) => void>;
    addSelection(selection: Selection): void;
    addSelectionCache(selection: Selection): void;
    addSelectionCacheRefetch(selection: Selection): void;
    removeSelections(selections: Set<Selection> | Selection[]): void;
}
export interface InterceptorManager {
    interceptors: Set<Interceptor>;
    globalInterceptor: Interceptor;
    createInterceptor: () => Interceptor;
    removeInterceptor: (interceptor: Interceptor) => void;
    addSelection: (selection: Selection) => void;
    addSelectionCache: (selection: Selection) => void;
    addSelectionCacheRefetch: (selection: Selection) => void;
    addSelections: (selection: Selection[] | Set<Selection>) => void;
    removeSelections: (selections: Selection[] | Set<Selection>) => void;
}
export declare function createInterceptorManager(): InterceptorManager;
