class Interceptor {
  constructor() {
    this.fetchSelections = new Set();
    this.listening = true;
    this.selectionAddListeners = new Set();
    this.selectionCacheListeners = new Set();
    this.selectionCacheRefetchListeners = new Set();
  }
  addSelection(selection) {
    if (this.listening) {
      this.fetchSelections.add(selection);
      for (const listener of this.selectionAddListeners) {
        listener(selection);
      }
    }
  }
  addSelectionCache(selection) {
    if (this.listening) {
      for (const listener of this.selectionCacheListeners) {
        listener(selection);
      }
    }
  }
  addSelectionCacheRefetch(selection) {
    if (this.listening && this.selectionCacheRefetchListeners.size) {
      for (const listener of this.selectionCacheRefetchListeners) {
        listener(selection);
      }
    }
  }
  removeSelections(selections) {
    for (const selection of selections) {
      this.fetchSelections.delete(selection);
    }
  }
}
function createInterceptorManager() {
  const interceptors = new Set();
  const globalInterceptor = new Interceptor();
  interceptors.add(globalInterceptor);
  function createInterceptor() {
    const interceptor = new Interceptor();
    interceptors.add(interceptor);
    return interceptor;
  }
  function removeInterceptor(interceptor) {
    interceptors.delete(interceptor);
  }
  function addSelection(selection) {
    for (const interceptor of interceptors) {
      interceptor.addSelection(selection);
    }
  }
  function addSelectionCache(selection) {
    for (const interceptor of interceptors) {
      if (interceptor === globalInterceptor)
        continue;
      interceptor.addSelectionCache(selection);
    }
  }
  function addSelectionCacheRefetch(selection) {
    for (const interceptor of interceptors) {
      if (interceptor === globalInterceptor)
        continue;
      interceptor.addSelectionCacheRefetch(selection);
    }
  }
  function addSelections(selection) {
    selection.forEach(addSelection);
  }
  function removeSelections(selections) {
    for (const interceptor of interceptors) {
      interceptor.removeSelections(selections);
    }
  }
  return {
    interceptors,
    globalInterceptor,
    createInterceptor,
    removeInterceptor,
    addSelection,
    addSelectionCache,
    addSelectionCacheRefetch,
    addSelections,
    removeSelections
  };
}

export { Interceptor, createInterceptorManager };
