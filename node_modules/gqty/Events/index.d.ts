import type { ExecutionResult } from 'graphql';
import type { CacheType } from '../Cache';
import type { GQtyError } from '../Error';
import type { Selection } from '../Selection';
export interface FetchEventData {
    label?: string;
    executionResult?: Pick<ExecutionResult, 'data' | 'extensions'>;
    error?: GQtyError;
    query: string;
    variables: Record<string, unknown> | undefined;
    cacheSnapshot: CacheType;
    selections: Selection[];
    type: 'query' | 'mutation' | 'subscription';
}
export interface CacheChangeEventData {
    selection: Selection;
    data: unknown;
}
interface OnFetchEventFn {
    (data: Promise<FetchEventData>, selections: Selection[]): void;
}
interface OnCacheChangeEventFn {
    (data: CacheChangeEventData): void;
}
export declare class EventHandler {
    hasFetchSubscribers: boolean;
    private onFetchListeners;
    private onCacheChangeListeners;
    sendCacheChange(data: CacheChangeEventData): void;
    sendFetchPromise(data: Promise<FetchEventData>, selections: Selection[]): void;
    onCacheChangeSubscribe(fn: OnCacheChangeEventFn): () => void;
    onFetchSubscribe(fn: OnFetchEventFn): () => void;
}
export {};
