import type { CacheType } from '../Cache';
import type { EventHandler } from '../Events';
import { ScalarsEnumsHash, Schema } from '../Schema';
import type { Selection } from '../Selection';
import { DeepPartial, ObjectWithType, PlainObject } from '../Utils';
declare type MakeTypenamesNonNullable<Obj extends {
    __typename?: string | null;
}> = {
    [K in keyof Obj]: K extends '__typename' ? NonNullable<Obj[K]> : Obj[K];
};
export interface NormalizationOptions<ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never> {
    /**
     * ### Custom object identifier.
     *
     * It gives an incoming object with it's ___typename_ and it should return:
     *
     * - A __string__ if successfully identified
     * - '__null__' if it shouldn't be normalized
     * - Or '__undefined__', to fallback to either default or custom keyFields
     *
     * @example
     * identifier(obj) {
     *   switch (obj.__typename) {
     *    case "User": {
     *      if (obj.email) {
     *         return `${obj.__typename}${obj.email}`
     *      }
     *      return null;
     *    }
     *    default: {
     *      return;
     *    }
     *  }
     * }
     *
     */
    identifier?: (obj: MakeTypenamesNonNullable<DeepPartial<ObjectTypes[ObjectTypesNames]>>) => string | null | undefined | void;
    /**
     * ### Auto-fetch & object identifier customization
     *
     * Keep in mind that `gqty` already checks your schema and looks for the fields **id** or **__id**
     * and it add thems **automatically**.
     *
     * Set the __id's__ of any object type in your schema.
     *
     * __IMPORTANT__: Please make sure to only put [`Scalars`](https://graphql.org/learn/schema/#scalar-types)
     * without any variable needed as keyFields
     *
     * @example
     * keyFields: {
     *    User: ["email"]
     * }
     */
    keyFields?: {
        [P in ObjectTypesNames]?: Array<Exclude<keyof ObjectTypes[P], '__typename'>> | null | undefined;
    };
}
export interface NormalizationHandler {
    getId: (obj: ObjectWithType) => string | undefined | null;
    getCacheFromSelection: <Value, NotFound>(selection: Selection, notFoundValue: NotFound, cache: CacheType) => Value | NotFound;
    scanNormalizedObjects: (obj: object) => void;
    normalizedCache: Record<string, PlainObject | undefined>;
    onObjectMergeConflict: (currentValue: object, incomingValue: object) => object | void;
    schemaKeys: Record<string, string[] | null | undefined>;
}
export declare function createNormalizationHandler(options: NormalizationOptions<string, Record<string, any>> | undefined | boolean, eventHandler: EventHandler, schema: Readonly<Schema>, scalarsEnumsHash: ScalarsEnumsHash): NormalizationHandler | undefined;
export {};
