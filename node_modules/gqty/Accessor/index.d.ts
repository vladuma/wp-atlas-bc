import type { ProxyAccessor } from '../Cache';
import type { InnerClientState } from '../Client/client';
import { DeepPartial, Schema, Type } from '../Schema';
import { Selection } from '../Selection';
declare const ProxySymbol: unique symbol;
export declare class SchemaUnion {
    /** union name */
    name: string;
    types: Record<
    /** object type name */
    string, 
    /** schema type of object type */
    Record<string, Type>>;
    /**
     * Proxy target, pre-made for performance
     */
    fieldsProxy: Record<string, typeof ProxySymbol>;
    constructor(
    /** union name */
    name: string, types: Record<
    /** object type name */
    string, 
    /** schema type of object type */
    Record<string, Type>>, 
    /**
     * Proxy target, pre-made for performance
     */
    fieldsProxy: Record<string, typeof ProxySymbol>);
}
export declare type SchemaUnions = {
    unions: Record<string, SchemaUnion>;
    unionObjectTypesForSelections: Record<string, [string]>;
};
export declare function createSchemaUnions(schema: Readonly<Schema>): SchemaUnions;
export interface SetCache {
    (selection: Selection, data: unknown): void;
    <A extends object>(accessor: A, data: DeepPartial<A> | null | undefined): void;
    <B extends (args?: any) => unknown>(accessor: B, args: Parameters<B>['0'], data: DeepPartial<ReturnType<B>> | null | undefined): void;
}
export interface AssignSelections {
    <A extends object, B extends A>(source: A | null | undefined, target: B | null | undefined): void;
}
export interface AccessorCreators<GeneratedSchema extends {
    query: {};
    mutation: {};
    subscription: {};
}> {
    createAccessor: (schemaValue: Schema[string] | SchemaUnion, prevSelection: Selection, unions?: string[] | undefined, parentTypename?: string | undefined) => ProxyAccessor | null;
    createArrayAccessor: (schemaValue: Schema[string] | SchemaUnion, prevSelection: Selection, unions?: string[] | undefined, parentTypename?: string | undefined) => ProxyAccessor | null;
    assignSelections: AssignSelections;
    setCache: SetCache;
    query: GeneratedSchema['query'];
    mutation: GeneratedSchema['mutation'];
    subscription: GeneratedSchema['subscription'];
}
export declare function createAccessorCreators<GeneratedSchema extends {
    query: {};
    mutation: {};
    subscription: {};
} = never>(innerState: InnerClientState): AccessorCreators<GeneratedSchema>;
export {};
