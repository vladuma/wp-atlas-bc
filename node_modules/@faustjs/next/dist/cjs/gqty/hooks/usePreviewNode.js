"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
// eslint-disable-next-line import/extensions
const client_1 = require("@faustjs/core/client");
const isNil_js_1 = __importDefault(require("lodash/isNil.js"));
const isUndefined_js_1 = __importDefault(require("lodash/isUndefined.js"));
const router_js_1 = require("next/router.js");
function create(useAuth, useQuery) {
    function usePreviewNode() {
        var _a;
        const { isReady, query: { p: postIdQuery, preview: previewQuery, typeName: typeNameQuery }, } = (0, router_js_1.useRouter)();
        const { isAuthenticated } = useAuth();
        const { contentNode } = useQuery();
        const unreadyResponse = {
            typeName: undefined,
            node: undefined,
        };
        const notFoundResponse = {
            typeName: null,
            node: null,
        };
        if (!isReady) {
            return unreadyResponse;
        }
        if ((0, isUndefined_js_1.default)(isAuthenticated) || isAuthenticated !== true) {
            return unreadyResponse;
        }
        if ((0, isNil_js_1.default)(postIdQuery) || (0, isNil_js_1.default)(previewQuery) || previewQuery !== 'true') {
            throw new Error(`usePreviewNode() requires the "p" and "preview" ` +
                `URL query parameters i.e. ?p=123&preview=true`);
        }
        if (Array.isArray(postIdQuery)) {
            throw new Error('usePreviewNode() requires the "p" URL query parameter to be a string');
        }
        const node = contentNode({
            id: postIdQuery,
            idType: client_1.ContentNodeIdTypeEnum.DATABASE_ID,
            asPreview: true,
        });
        /**
         * `contentNode` returns null if the post does not exist
         * or if the preview has not been generated yet
         *
         * @link https://github.com/wp-graphql/wp-graphql/issues/2166
         */
        if (node === null) {
            return notFoundResponse;
        }
        if (!(0, isNil_js_1.default)(typeNameQuery) && Array.isArray(typeNameQuery)) {
            throw new Error('usePreviewNode() requires the "postType" URL' +
                'query parameter to be a string');
        }
        // eslint-disable-next-line no-underscore-dangle
        const previewNodeTypeName = typeNameQuery !== null && typeNameQuery !== void 0 ? typeNameQuery : node === null || node === void 0 ? void 0 : node.__typename;
        if ((0, isNil_js_1.default)(previewNodeTypeName)) {
            return notFoundResponse;
        }
        const previewNode = (_a = node === null || node === void 0 ? void 0 : node.$on) === null || _a === void 0 ? void 0 : _a[previewNodeTypeName];
        /**
         * `previewNodeTypeName` could be `undefined` here if the postType
         * URL query param is manually specified and it is not valid.
         */
        if ((0, isUndefined_js_1.default)(previewNode)) {
            return notFoundResponse;
        }
        return {
            typeName: previewNodeTypeName,
            node: previewNode,
        };
    }
    return usePreviewNode;
}
exports.create = create;
