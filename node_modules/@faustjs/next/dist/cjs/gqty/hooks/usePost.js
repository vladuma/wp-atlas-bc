"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
// eslint-disable-next-line import/extensions
const client_1 = require("@faustjs/core/client");
const router_js_1 = require("next/router.js");
const defaults_js_1 = __importDefault(require("lodash/defaults.js"));
const isString_js_1 = __importDefault(require("lodash/isString.js"));
const index_js_1 = require("../../utils/index.js");
function create(useQuery) {
    return (args) => {
        const router = (0, router_js_1.useRouter)();
        const { post } = useQuery();
        let params = (0, defaults_js_1.default)({}, args);
        const { query } = router;
        if ((0, index_js_1.hasPostId)(query)) {
            params = {
                id: query.postId,
                idType: client_1.PostIdType.ID,
                ...params,
            };
        }
        else if ((0, index_js_1.hasPostSlug)(query)) {
            params = {
                id: query.postSlug,
                idType: client_1.PostIdType.SLUG,
                ...params,
            };
        }
        else if ((0, index_js_1.hasPostUri)(query)) {
            params = {
                id: query.postUri.join('/'),
                idType: client_1.PostIdType.URI,
                ...params,
            };
        }
        if (!(0, isString_js_1.default)(params.id)) {
            throw new Error('Invalid parameters for usePost, you must send in an id or specify known URL params in your config');
        }
        return post(params);
    };
}
exports.create = create;
