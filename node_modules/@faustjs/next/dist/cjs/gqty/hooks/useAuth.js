"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const core_1 = require("@faustjs/core");
// eslint-disable-next-line import/extensions
const auth_1 = require("@faustjs/core/auth");
const defaults_js_1 = __importDefault(require("lodash/defaults.js"));
const isObject_js_1 = __importDefault(require("lodash/isObject.js"));
const isUndefined_js_1 = __importDefault(require("lodash/isUndefined.js"));
const noop_js_1 = __importDefault(require("lodash/noop.js"));
const trim_js_1 = __importDefault(require("lodash/trim.js"));
const react_1 = require("react");
function create() {
    return (useAuthOptions) => {
        const options = (0, defaults_js_1.default)({}, useAuthOptions, {
            shouldRedirect: true,
        });
        const { shouldRedirect } = options;
        const { authType, loginPagePath } = (0, core_1.config)();
        const [{ isAuthenticated, isLoading, authResult }, setState] = (0, react_1.useState)({
            isAuthenticated: undefined,
            isLoading: true,
            authResult: undefined,
        });
        // Check if a user is authenticated
        (0, react_1.useEffect)(() => {
            if (typeof window === 'undefined') {
                return noop_js_1.default;
            }
            let mounted = true;
            /* eslint-disable @typescript-eslint/no-floating-promises */
            (async () => {
                if (!mounted) {
                    return;
                }
                const auth = await (0, auth_1.ensureAuthorization)({
                    redirectUri: window.location.href,
                    loginPageUri: `/${(0, trim_js_1.default)(loginPagePath, '/')}/?redirect_uri=${encodeURIComponent(window.location.href)}`,
                });
                if (!mounted) {
                    return;
                }
                setState({
                    authResult: auth,
                    isAuthenticated: auth === true,
                    isLoading: false,
                });
            })();
            return () => {
                mounted = false;
            };
        }, [loginPagePath]);
        // Redirect the user to the login page if they are not authenticated
        (0, react_1.useEffect)(() => {
            // Do not redirect if specified in UseAuthOptions.
            if (!shouldRedirect) {
                return noop_js_1.default;
            }
            if (typeof window === 'undefined') {
                return noop_js_1.default;
            }
            if ((0, isUndefined_js_1.default)(isAuthenticated) || isAuthenticated === true) {
                return noop_js_1.default;
            }
            // The user is not authenticated. Redirect them to the login page.
            const timeout = setTimeout(() => {
                if (!(0, isObject_js_1.default)(authResult)) {
                    return;
                }
                if (authType === 'local' && authResult.login) {
                    window.location.replace(authResult.login);
                }
                if (authType === 'redirect' && authResult.redirect) {
                    window.location.replace(authResult.redirect);
                }
            }, 200);
            return () => {
                clearTimeout(timeout);
            };
        }, [shouldRedirect, isAuthenticated, authResult, authType]);
        return { isAuthenticated, isLoading, authResult };
    };
}
exports.create = create;
