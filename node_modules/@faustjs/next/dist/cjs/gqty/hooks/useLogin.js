"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
// eslint-disable-next-line import/extensions
const auth_1 = require("@faustjs/core/auth");
// eslint-disable-next-line import/extensions
const utils_1 = require("@faustjs/core/utils");
const noop_js_1 = __importDefault(require("lodash/noop.js"));
const react_1 = require("react");
function create(useMutation) {
    return (options) => {
        const { useMutationOptions } = options || {};
        const [loginMutation, { isLoading, data, error }] = useMutation((mutation, args) => {
            const { username, email, password } = args;
            const { code, error: mutationError } = mutation.generateAuthorizationCode({
                input: {
                    username,
                    email,
                    password,
                },
            }) || {};
            if (mutationError) {
                return { error: mutationError };
            }
            return { code };
        }, useMutationOptions);
        /**
         * Exchange a username/email and password for an authorization code
         *
         * @param {string} usernameEmail A WordPress username or email
         * @param {string} password The password for the username/email
         *
         * @returns Promise<void>
         */
        async function login(usernameEmail, password) {
            await loginMutation({
                args: {
                    username: (0, utils_1.isValidEmail)(usernameEmail) ? undefined : usernameEmail,
                    email: (0, utils_1.isValidEmail)(usernameEmail) ? usernameEmail : undefined,
                    password,
                },
            });
        }
        // If there is a successful login, and a redirect_uri query param present in the
        // url, then redirect the user to the redirect_uri.
        (0, react_1.useEffect)(() => {
            if (typeof window === 'undefined') {
                return noop_js_1.default;
            }
            if (!data || !data.code) {
                return noop_js_1.default;
            }
            let mounted = true;
            void (async () => {
                if (!mounted) {
                    return;
                }
                await (0, auth_1.fetchAccessToken)(data.code);
                if (!mounted) {
                    return;
                }
                const redirectUri = (0, utils_1.getQueryParam)(window.location.href, 'redirect_uri');
                if (redirectUri) {
                    window.location.replace(redirectUri);
                }
            })();
            return () => {
                mounted = false;
            };
        }, [data]);
        return { login, isLoading, data, error };
    };
}
exports.create = create;
