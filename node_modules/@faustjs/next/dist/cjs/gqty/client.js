"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClient = exports.FaustContext = void 0;
const core_1 = require("@faustjs/core");
const react_1 = require("@gqty/react");
const noop_js_1 = __importDefault(require("lodash/noop.js"));
const isObject_js_1 = __importDefault(require("lodash/isObject.js"));
const merge_js_1 = __importDefault(require("lodash/merge.js"));
const react_2 = __importStar(require("react"));
const index_js_1 = require("./hooks/index.js");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
exports.FaustContext = react_2.default.createContext({});
/* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
function getClient(clientConfig, createReactClientOpts) {
    var _a;
    const coreClient = (0, core_1.getClient)(clientConfig);
    let reactClientOpts = {
        defaults: {
            // Set this flag as "true" if your usage involves React Suspense
            // Keep in mind that you can overwrite it in a per-hook basis
            suspense: false,
            // Set this flag based on your needs
            staleWhileRevalidate: false,
        },
    };
    if ((0, isObject_js_1.default)(createReactClientOpts)) {
        reactClientOpts = (0, merge_js_1.default)(reactClientOpts, createReactClientOpts);
    }
    const reactClient = (0, react_1.createReactClient)(coreClient, reactClientOpts);
    const authReactClient = (0, react_1.createReactClient)(coreClient.auth, reactClientOpts);
    const haveServerContext = (0, isObject_js_1.default)((_a = clientConfig.context) === null || _a === void 0 ? void 0 : _a.apiClient);
    let nextClient;
    function useClient() {
        var _a;
        let client = (_a = (0, react_2.useContext)(exports.FaustContext)) === null || _a === void 0 ? void 0 : _a.client;
        if (haveServerContext || !(0, isObject_js_1.default)(client)) {
            client = nextClient;
        }
        return client;
    }
    function useAuthClient() {
        var _a;
        let client = (_a = (0, react_2.useContext)(exports.FaustContext)) === null || _a === void 0 ? void 0 : _a.client;
        if (haveServerContext || !(0, isObject_js_1.default)(client)) {
            client = nextClient;
        }
        return client.auth;
    }
    const hooks = (0, index_js_1.createHooks)(useClient);
    const authHooks = (0, index_js_1.createAuthHooks)(useAuthClient);
    function useIsLoading() {
        const { isLoading } = nextClient.useQuery().$state;
        const isAuthLoading = nextClient.auth.useQuery().$state.isLoading;
        return isLoading || isAuthLoading;
    }
    function setAsRoot() {
        nextClient.useQuery = reactClient.useQuery;
        nextClient.useLazyQuery = reactClient.useLazyQuery;
        nextClient.useTransactionQuery = reactClient.useTransactionQuery;
        nextClient.usePaginatedQuery = reactClient.usePaginatedQuery;
        nextClient.useMutation = reactClient.useMutation;
        nextClient.useSubscription = reactClient.useSubscription;
        nextClient.useClient = () => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            (0, react_2.useContext)(exports.FaustContext);
            return nextClient;
        };
        nextClient.auth.useQuery = authReactClient.useQuery;
        nextClient.auth.useLazyQuery = authReactClient.useLazyQuery;
        nextClient.auth.useTransactionQuery = authReactClient.useTransactionQuery;
        nextClient.auth.usePaginatedQuery = authReactClient.usePaginatedQuery;
        nextClient.auth.useMutation = authReactClient.useMutation;
        nextClient.auth.useSubscription = authReactClient.useSubscription;
        nextClient.auth.useClient = () => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            (0, react_2.useContext)(exports.FaustContext);
            return nextClient.auth;
        };
        nextClient.setAsRoot = noop_js_1.default;
    }
    nextClient = {
        client: coreClient,
        ...reactClient,
        auth: {
            client: coreClient.auth,
            ...authReactClient,
            ...authHooks,
            useClient: useAuthClient,
            useIsLoading,
        },
        setAsRoot,
        context: clientConfig.context,
        ...hooks,
        useClient,
        useIsLoading,
    };
    return nextClient;
}
exports.getClient = getClient;
