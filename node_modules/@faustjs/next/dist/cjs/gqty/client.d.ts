/// <reference types="node" />
import { ClientConfig, WithClient } from '@faustjs/core';
import type { RequiredSchema } from '@faustjs/react';
import { CreateReactClientOptions, ReactClient } from '@gqty/react';
import type { GQtyClient } from 'gqty';
import type { IncomingMessage } from 'http';
import React from 'react';
import { NextClientHooks, NextClientHooksWithAuth } from './hooks/index.js';
export interface NextClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never> extends ReactClient<Schema>, Omit<NextClientHooks<Schema>, 'useClient'> {
    client: GQtyClient<Schema>;
    auth: ReactClient<Schema> & NextClientHooksWithAuth<Schema> & {
        client: GQtyClient<Schema>;
        useClient: () => NextClient<Schema, ObjectTypesNames, ObjectTypes>['auth'];
        useIsLoading(): boolean;
    };
    useClient: () => NextClient<Schema, ObjectTypesNames, ObjectTypes>;
    useIsLoading(): boolean;
    setAsRoot(): void;
    context: WithClient<IncomingMessage, Schema> | undefined;
}
export interface FaustContextType {
    client?: NextClient<RequiredSchema>;
}
export declare const FaustContext: React.Context<FaustContextType>;
export declare function getClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never>(clientConfig: ClientConfig<Schema, ObjectTypesNames, ObjectTypes>, createReactClientOpts?: CreateReactClientOptions): NextClient<Schema, ObjectTypesNames, ObjectTypes>;
