"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FaustProvider = void 0;
const isNil_js_1 = __importDefault(require("lodash/isNil.js"));
const react_1 = __importDefault(require("react"));
const getProps_js_1 = require("../server/getProps.js");
const client_js_1 = require("../gqty/client.js");
/**
 * The FaustProvider is a React component required to properly facilitate SSR and SSG for Faust.js.
 *
 * @see https://faustjs.org/docs/next/guides/ssr-ssg#rehydration-using-faustprovider-
 */
function FaustProvider({ children, pageProps, client, }) {
    client.setAsRoot();
    const { useHydrateCache, auth: { useHydrateCache: useAuthHydrateCache }, } = client;
    const cacheSnapshot = pageProps === null || pageProps === void 0 ? void 0 : pageProps[getProps_js_1.CLIENT_CACHE_PROP];
    const authSnapshot = pageProps === null || pageProps === void 0 ? void 0 : pageProps[getProps_js_1.AUTH_CLIENT_CACHE_PROP];
    useHydrateCache({
        cacheSnapshot: (0, isNil_js_1.default)(cacheSnapshot) ? undefined : cacheSnapshot,
    });
    useAuthHydrateCache({
        cacheSnapshot: (0, isNil_js_1.default)(authSnapshot) ? undefined : authSnapshot,
    });
    return (react_1.default.createElement(client_js_1.FaustContext.Provider, { value: {
            client,
        } }, children));
}
exports.FaustProvider = FaustProvider;
