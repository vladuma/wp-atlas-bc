"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextStaticProps = exports.getNextServerSideProps = exports.is404 = exports.getProps = exports.AUTH_CLIENT_CACHE_PROP = exports.CLIENT_CACHE_PROP = void 0;
/* eslint-disable react/no-children-prop */
// eslint-disable-next-line import/extensions
const client_1 = require("@faustjs/core/client");
const lodash_1 = require("lodash");
const isNil_js_1 = __importDefault(require("lodash/isNil.js"));
const router_context_js_1 = require("next/dist/shared/lib/router-context.js");
const react_1 = __importDefault(require("react"));
const config_js_1 = require("../config/config.js");
const client_js_1 = require("../gqty/client.js");
const index_js_1 = require("../utils/index.js");
exports.CLIENT_CACHE_PROP = '__CLIENT_CACHE_PROP';
exports.AUTH_CLIENT_CACHE_PROP = '__AUTH_CLIENT_CACHE_PROP';
async function getProps(context, { client, Page, props, }) {
    let cacheSnapshot;
    let authSnapshot;
    client.setAsRoot();
    if (!(0, isNil_js_1.default)(Page)) {
        const authClient = client.auth.client;
        const { cacheSnapshot: coreAuthSnapshot } = await authClient.prepareRender(async () => {
            const { cacheSnapshot: coreSnapshot } = await client.prepareReactRender(react_1.default.createElement(router_context_js_1.RouterContext.Provider
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            , { 
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                value: { query: { ...context.params } } },
                react_1.default.createElement(client_js_1.FaustContext.Provider, { value: { client } },
                    react_1.default.createElement(Page, { ...props }))));
            cacheSnapshot = coreSnapshot;
        });
        authSnapshot = coreAuthSnapshot;
    }
    return {
        props: {
            [exports.CLIENT_CACHE_PROP]: cacheSnapshot !== null && cacheSnapshot !== void 0 ? cacheSnapshot : null,
            [exports.AUTH_CLIENT_CACHE_PROP]: authSnapshot !== null && authSnapshot !== void 0 ? authSnapshot : null,
            ...props,
        },
    };
}
exports.getProps = getProps;
async function is404({ params }, { client }) {
    if (!params) {
        return false;
    }
    const { client: { inlineResolved, query }, } = client;
    let entityExists = false;
    let result;
    try {
        if ((0, index_js_1.hasPostId)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.post({
                    id: params.postId,
                    idType: client_1.PostIdType.ID,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if ((0, index_js_1.hasPostSlug)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.post({
                    id: params.postSlug,
                    idType: client_1.PostIdType.SLUG,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if ((0, index_js_1.hasPostUri)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.post({
                    id: params.postUri.join('/'),
                    idType: client_1.PostIdType.URI,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if ((0, index_js_1.hasPageId)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.page({
                    id: params.pageId,
                    idType: client_1.PageIdType.ID,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if ((0, index_js_1.hasPageUri)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.page({
                    id: params.pageUri.join('/'),
                    idType: client_1.PageIdType.URI,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if ((0, index_js_1.hasCategoryId)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.category({
                    id: params.categoryId,
                    idType: client_1.CategoryIdType.ID,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
        else if ((0, index_js_1.hasCategorySlug)(params)) {
            result = inlineResolved(() => {
                var _a;
                return (_a = query.category({
                    id: params.categorySlug,
                    idType: client_1.CategoryIdType.SLUG,
                })) === null || _a === void 0 ? void 0 : _a.id;
            }, { refetch: true });
        }
    }
    catch (e) {
        return true;
    }
    if (result instanceof Promise) {
        entityExists = !(0, isNil_js_1.default)(await result);
    }
    else {
        entityExists = !(0, isNil_js_1.default)(result);
    }
    return !entityExists;
}
exports.is404 = is404;
/**
 * This helper function lets you server side render your page with WordPress data
 *
 * @param {GetServerSidePropsContext} context
 * @param {GetNextServerSidePropsConfig} cfg
 * @see https://faustjs.org/docs/next/guides/ssr-ssg#ssr-using-getnextserversideprops
 */
async function getNextServerSideProps(context, cfg) {
    const { notFound, redirect } = cfg;
    if ((0, lodash_1.isBoolean)(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if ((0, lodash_1.isObject)(redirect)) {
        return {
            redirect,
        };
    }
    return getProps(context, cfg);
}
exports.getNextServerSideProps = getNextServerSideProps;
/**
 * This helper function lets you build a static site with your WordPress data
 *
 * @param {GetStaticPropsContext} context
 * @param {GetNextStaticPropsConfig} cfg
 * @see https://faustjs.org/docs/next/guides/ssr-ssg#ssg-using-getnextstaticprops
 */
async function getNextStaticProps(context, cfg) {
    const { notFound, redirect, revalidate } = cfg;
    const nextConfig = (0, config_js_1.config)();
    if ((0, lodash_1.isBoolean)(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if ((0, lodash_1.isObject)(redirect)) {
        return {
            redirect,
        };
    }
    const pageProps = await getProps(context, cfg);
    /* eslint-disable @typescript-eslint/no-explicit-any */
    if ((0, lodash_1.isObject)(pageProps.props)) {
        pageProps.revalidate = !(0, isNil_js_1.default)(revalidate)
            ? revalidate
            : nextConfig.revalidate;
    }
    /* eslint-enable @typescript-eslint/no-explicit-any */
    return pageProps;
}
exports.getNextStaticProps = getNextStaticProps;
