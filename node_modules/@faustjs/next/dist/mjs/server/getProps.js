/* eslint-disable react/no-children-prop */
// eslint-disable-next-line import/extensions
import { CategoryIdType, PageIdType, PostIdType } from '@faustjs/core/client';
import { isBoolean, isObject } from 'lodash';
import isNil from 'lodash/isNil.js';
import { RouterContext } from 'next/dist/shared/lib/router-context.js';
import React from 'react';
import { config } from '../config/config.js';
import { FaustContext } from '../gqty/client.js';
import { hasCategoryId, hasCategorySlug, hasPageId, hasPageUri, hasPostId, hasPostSlug, hasPostUri, } from '../utils/index.js';
export const CLIENT_CACHE_PROP = '__CLIENT_CACHE_PROP';
export const AUTH_CLIENT_CACHE_PROP = '__AUTH_CLIENT_CACHE_PROP';
export async function getProps(context, { client, Page, props, }) {
    let cacheSnapshot;
    let authSnapshot;
    client.setAsRoot();
    if (!isNil(Page)) {
        const authClient = client.auth.client;
        const { cacheSnapshot: coreAuthSnapshot } = await authClient.prepareRender(async () => {
            const { cacheSnapshot: coreSnapshot } = await client.prepareReactRender(React.createElement(RouterContext.Provider
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            , { 
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                value: { query: { ...context.params } } },
                React.createElement(FaustContext.Provider, { value: { client } },
                    React.createElement(Page, { ...props }))));
            cacheSnapshot = coreSnapshot;
        });
        authSnapshot = coreAuthSnapshot;
    }
    return {
        props: {
            [CLIENT_CACHE_PROP]: cacheSnapshot ?? null,
            [AUTH_CLIENT_CACHE_PROP]: authSnapshot ?? null,
            ...props,
        },
    };
}
export async function is404({ params }, { client }) {
    if (!params) {
        return false;
    }
    const { client: { inlineResolved, query }, } = client;
    let entityExists = false;
    let result;
    try {
        if (hasPostId(params)) {
            result = inlineResolved(() => {
                return query.post({
                    id: params.postId,
                    idType: PostIdType.ID,
                })?.id;
            }, { refetch: true });
        }
        else if (hasPostSlug(params)) {
            result = inlineResolved(() => {
                return query.post({
                    id: params.postSlug,
                    idType: PostIdType.SLUG,
                })?.id;
            }, { refetch: true });
        }
        else if (hasPostUri(params)) {
            result = inlineResolved(() => {
                return query.post({
                    id: params.postUri.join('/'),
                    idType: PostIdType.URI,
                })?.id;
            }, { refetch: true });
        }
        else if (hasPageId(params)) {
            result = inlineResolved(() => {
                return query.page({
                    id: params.pageId,
                    idType: PageIdType.ID,
                })?.id;
            }, { refetch: true });
        }
        else if (hasPageUri(params)) {
            result = inlineResolved(() => {
                return query.page({
                    id: params.pageUri.join('/'),
                    idType: PageIdType.URI,
                })?.id;
            }, { refetch: true });
        }
        else if (hasCategoryId(params)) {
            result = inlineResolved(() => {
                return query.category({
                    id: params.categoryId,
                    idType: CategoryIdType.ID,
                })?.id;
            }, { refetch: true });
        }
        else if (hasCategorySlug(params)) {
            result = inlineResolved(() => {
                return query.category({
                    id: params.categorySlug,
                    idType: CategoryIdType.SLUG,
                })?.id;
            }, { refetch: true });
        }
    }
    catch (e) {
        return true;
    }
    if (result instanceof Promise) {
        entityExists = !isNil(await result);
    }
    else {
        entityExists = !isNil(result);
    }
    return !entityExists;
}
/**
 * This helper function lets you server side render your page with WordPress data
 *
 * @param {GetServerSidePropsContext} context
 * @param {GetNextServerSidePropsConfig} cfg
 * @see https://faustjs.org/docs/next/guides/ssr-ssg#ssr-using-getnextserversideprops
 */
export async function getNextServerSideProps(context, cfg) {
    const { notFound, redirect } = cfg;
    if (isBoolean(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if (isObject(redirect)) {
        return {
            redirect,
        };
    }
    return getProps(context, cfg);
}
/**
 * This helper function lets you build a static site with your WordPress data
 *
 * @param {GetStaticPropsContext} context
 * @param {GetNextStaticPropsConfig} cfg
 * @see https://faustjs.org/docs/next/guides/ssr-ssg#ssg-using-getnextstaticprops
 */
export async function getNextStaticProps(context, cfg) {
    const { notFound, redirect, revalidate } = cfg;
    const nextConfig = config();
    if (isBoolean(notFound) && notFound === true) {
        return {
            notFound,
        };
    }
    if (isObject(redirect)) {
        return {
            redirect,
        };
    }
    const pageProps = await getProps(context, cfg);
    /* eslint-disable @typescript-eslint/no-explicit-any */
    if (isObject(pageProps.props)) {
        pageProps.revalidate = !isNil(revalidate)
            ? revalidate
            : nextConfig.revalidate;
    }
    /* eslint-enable @typescript-eslint/no-explicit-any */
    return pageProps;
}
