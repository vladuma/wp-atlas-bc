import { getClient as getCoreClient, } from '@faustjs/core';
import { createReactClient, } from '@gqty/react';
import noop from 'lodash/noop.js';
import isObject from 'lodash/isObject.js';
import merge from 'lodash/merge.js';
import React, { useContext } from 'react';
import { createAuthHooks, createHooks, } from './hooks/index.js';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const FaustContext = React.createContext({});
/* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
export function getClient(clientConfig, createReactClientOpts) {
    const coreClient = getCoreClient(clientConfig);
    let reactClientOpts = {
        defaults: {
            // Set this flag as "true" if your usage involves React Suspense
            // Keep in mind that you can overwrite it in a per-hook basis
            suspense: false,
            // Set this flag based on your needs
            staleWhileRevalidate: false,
        },
    };
    if (isObject(createReactClientOpts)) {
        reactClientOpts = merge(reactClientOpts, createReactClientOpts);
    }
    const reactClient = createReactClient(coreClient, reactClientOpts);
    const authReactClient = createReactClient(coreClient.auth, reactClientOpts);
    const haveServerContext = isObject(clientConfig.context?.apiClient);
    let nextClient;
    function useClient() {
        let client = useContext(FaustContext)
            ?.client;
        if (haveServerContext || !isObject(client)) {
            client = nextClient;
        }
        return client;
    }
    function useAuthClient() {
        let client = useContext(FaustContext)
            ?.client;
        if (haveServerContext || !isObject(client)) {
            client = nextClient;
        }
        return client.auth;
    }
    const hooks = createHooks(useClient);
    const authHooks = createAuthHooks(useAuthClient);
    function useIsLoading() {
        const { isLoading } = nextClient.useQuery().$state;
        const isAuthLoading = nextClient.auth.useQuery().$state.isLoading;
        return isLoading || isAuthLoading;
    }
    function setAsRoot() {
        nextClient.useQuery = reactClient.useQuery;
        nextClient.useLazyQuery = reactClient.useLazyQuery;
        nextClient.useTransactionQuery = reactClient.useTransactionQuery;
        nextClient.usePaginatedQuery = reactClient.usePaginatedQuery;
        nextClient.useMutation = reactClient.useMutation;
        nextClient.useSubscription = reactClient.useSubscription;
        nextClient.useClient = () => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            useContext(FaustContext);
            return nextClient;
        };
        nextClient.auth.useQuery = authReactClient.useQuery;
        nextClient.auth.useLazyQuery = authReactClient.useLazyQuery;
        nextClient.auth.useTransactionQuery = authReactClient.useTransactionQuery;
        nextClient.auth.usePaginatedQuery = authReactClient.usePaginatedQuery;
        nextClient.auth.useMutation = authReactClient.useMutation;
        nextClient.auth.useSubscription = authReactClient.useSubscription;
        nextClient.auth.useClient = () => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            useContext(FaustContext);
            return nextClient.auth;
        };
        nextClient.setAsRoot = noop;
    }
    nextClient = {
        client: coreClient,
        ...reactClient,
        auth: {
            client: coreClient.auth,
            ...authReactClient,
            ...authHooks,
            useClient: useAuthClient,
            useIsLoading,
        },
        setAsRoot,
        context: clientConfig.context,
        ...hooks,
        useClient,
        useIsLoading,
    };
    return nextClient;
}
