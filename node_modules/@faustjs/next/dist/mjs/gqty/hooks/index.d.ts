import type { RequiredSchema } from '@faustjs/react';
import { ReactClient } from '@gqty/react';
import type { GQtyError } from 'gqty';
import type { NextClient } from '../client.js';
import type { UsePreviewNodeResponse } from './usePreviewNode.js';
import { UseAuthOptions } from './useAuth.js';
import { UsePreviewResponse } from './usePreview.js';
import { UseLoginOptions } from './useLogin.js';
export declare type UseClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never> = NextClient<Schema, ObjectTypesNames, ObjectTypes>['useClient'] | NextClient<Schema, ObjectTypesNames, ObjectTypes>['auth']['useClient'];
interface WithAuthHooks<Schema extends RequiredSchema> {
    /**
     * Faust.js hook to get preview data for a page or post.
     *
     * @deprecated Deprecated in favor of `usePreviewNode`
     *
     * @see https://faustjs.org/docs/next/reference/hooks/usePreview
     */
    usePreview(): UsePreviewResponse<Schema>;
    /**
     * Faust.js hook to get preview data for a post type.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/usePreviewNode
     */
    usePreviewNode(): UsePreviewNodeResponse;
    /**
     * Faust.js hook to ensure a user is authenticated.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/useAuth
     */
    useAuth(options?: UseAuthOptions): {
        isLoading: boolean;
        isAuthenticated: boolean | undefined;
        authResult: true | {
            redirect?: string | undefined;
            login?: string | undefined;
        } | undefined;
    };
    /**
     * Faust.js hook to facilitate a login request.
     *
     * @param {UseLoginOptions} [options]
     * @see https://faustjs.org/docs/next/reference/hooks/useLogin
     */
    useLogin(options?: UseLoginOptions): {
        login: (usernameEmail: string, password: string) => Promise<void>;
        isLoading: boolean;
        data: {
            error: any;
            code?: undefined;
        } | {
            code: any;
            error?: undefined;
        } | undefined;
        error: GQtyError | undefined;
    };
    /**
     * Faust.js hook to facilitate a logout request.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/useLogout
     */
    useLogout(): {
        isLoading: boolean;
        isLoggedOut: boolean | undefined;
        logout: () => Promise<void>;
    };
}
export interface NextClientHooks<Schema extends RequiredSchema> extends Pick<ReactClient<Schema>, 'useLazyQuery' | 'useMutation' | 'usePaginatedQuery' | 'useQuery' | 'useSubscription' | 'useTransactionQuery' | 'useHydrateCache'> {
    /**
     * GQty hook to make any query request to the Headless Wordpress API.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/gqty-hooks
     */
    useQuery: ReactClient<Schema>['useQuery'];
    useHydrateCache: ReactClient<Schema>['useHydrateCache'];
    /**
     * Faust.js hook to get a category.
     */
    useCategory(args?: Parameters<Schema['query']['category']>[0]): ReturnType<Schema['query']['category']>;
    /**
     * Faust.js hook to get a list of posts.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/usePosts
     */
    usePosts(args?: Parameters<Schema['query']['posts']>[0]): ReturnType<Schema['query']['posts']>;
    /**
     * Faust.js hook to get a single post.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/usePost
     */
    usePost(args?: Parameters<Schema['query']['post']>[0]): ReturnType<Schema['query']['post']>;
    /**
     * Faust.js hook to get a single page.
     *
     * @see https://faustjs.org/docs/next/reference/hooks/usePage
     */
    usePage(args?: Parameters<Schema['query']['page']>[0]): ReturnType<Schema['query']['page']>;
}
export declare type NextClientHooksWithAuth<Schema extends RequiredSchema> = NextClientHooks<Schema> & WithAuthHooks<Schema>;
export declare function createHooks<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never>(useClient: UseClient<Schema, ObjectTypesNames, ObjectTypes>): NextClientHooks<Schema>;
export declare function createAuthHooks<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never>(useClient: UseClient<Schema, ObjectTypesNames, ObjectTypes>): NextClientHooksWithAuth<Schema>;
export {};
