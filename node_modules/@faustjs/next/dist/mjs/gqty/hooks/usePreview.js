// eslint-disable-next-line import/extensions
import { PageIdType, PostIdType } from '@faustjs/core/client';
import isUndefined from 'lodash/isUndefined.js';
import { useRouter } from 'next/router.js';
import { hasPageId, hasPostId } from '../../utils/index.js';
export function create(useAuth, useQuery) {
    function usePreview() {
        const { query: { p, page_id: pageId }, } = useRouter();
        const { isAuthenticated } = useAuth();
        const { post: postQuery, page: pageQuery } = useQuery();
        const isPage = !!pageId;
        const args = {
            pageId: isPage ? p : undefined,
            postId: !isPage ? p : undefined,
        };
        if (isUndefined(isAuthenticated) || isAuthenticated !== true) {
            return;
        }
        if (hasPageId(args)) {
            const page = pageQuery({
                id: args?.pageId ?? '',
                idType: PageIdType.DATABASE_ID,
            });
            const mostRecentPageRevision = page?.revisions({ first: 1 })?.edges?.[0]
                ?.node;
            // eslint-disable-next-line consistent-return
            return {
                type: 'page',
                page: mostRecentPageRevision?.id ? mostRecentPageRevision : page,
            };
        }
        if (hasPostId(args)) {
            const post = postQuery({
                id: args?.postId ?? '',
                idType: PostIdType.DATABASE_ID,
            });
            const mostRecentPostRevision = post?.revisions({ first: 1 })?.edges?.[0]
                ?.node;
            // eslint-disable-next-line consistent-return
            return {
                type: 'post',
                post: mostRecentPostRevision?.id ? mostRecentPostRevision : post,
            };
        }
    }
    return usePreview;
}
