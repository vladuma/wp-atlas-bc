"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClient = exports.contextHasClient = exports.createAuthQueryFetcher = exports.createQueryFetcher = void 0;
__exportStar(require("./schema.generated.js"), exports);
const gqty_1 = require("gqty");
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
const isFunction_js_1 = __importDefault(require("lodash/isFunction.js"));
const isNil_js_1 = __importDefault(require("lodash/isNil.js"));
const isObject_js_1 = __importDefault(require("lodash/isObject.js"));
const omit_js_1 = __importDefault(require("lodash/omit.js"));
const index_js_1 = require("../auth/index.js");
const config_js_1 = require("../config/config.js");
function createQueryFetcher(applyRequestContext) {
    return async function (query, variables) {
        const url = (0, config_js_1.getGqlUrl)();
        const headers = {
            'Content-Type': 'application/json',
        };
        const init = {
            method: 'POST',
            headers,
            body: JSON.stringify({
                query,
                variables,
            }),
            mode: 'cors',
        };
        let requestContext = { url, init };
        if ((0, isFunction_js_1.default)(applyRequestContext)) {
            requestContext = await applyRequestContext(url, init);
        }
        const response = await (0, isomorphic_fetch_1.default)(requestContext.url, requestContext.init);
        const json = await response.json();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return json;
    };
}
exports.createQueryFetcher = createQueryFetcher;
function createAuthQueryFetcher(context, applyRequestContext) {
    const applyRequestContextFn = async (url, init) => {
        let token;
        if (!(0, isNil_js_1.default)(context)) {
            const { Cookies } = await Promise.resolve().then(() => __importStar(require('../server/auth/cookie.js')));
            const { OAuth } = await Promise.resolve().then(() => __importStar(require('../server/auth/token.js')));
            const oauth = new OAuth(new Cookies(context));
            const oauthTokens = await oauth.fetch();
            if (oauth.isOAuthTokens(oauthTokens)) {
                token = oauthTokens.accessToken;
            }
        }
        else {
            token = (0, index_js_1.getAccessToken)();
        }
        init.headers = Object.assign({ Authorization: `Bearer ${token}` }, init.headers);
        let requestContext = { url, init };
        if ((0, isFunction_js_1.default)(applyRequestContext)) {
            requestContext = await applyRequestContext(url, init);
        }
        return requestContext;
    };
    return createQueryFetcher(applyRequestContextFn);
}
exports.createAuthQueryFetcher = createAuthQueryFetcher;
function contextHasClient(context) {
    return ((0, isObject_js_1.default)(context) &&
        (0, isObject_js_1.default)(context.apiClient));
}
exports.contextHasClient = contextHasClient;
/* eslint-disable @typescript-eslint/ban-types */
function getClient(clientConfig) {
    const { context, schema, scalarsEnumsHash, queryFetcher: configQueryFetcher, authQueryFetcher: configAuthQueryFetcher, applyRequestContext, } = clientConfig;
    if (contextHasClient(context)) {
        return context.apiClient;
    }
    if ((0, isNil_js_1.default)(schema) || (0, isNil_js_1.default)(scalarsEnumsHash)) {
        throw new Error('You must specify a schema and scalarEnumsHash in order to create a client.');
    }
    const apiClient = {
        ...(0, gqty_1.createClient)({
            schema,
            scalarsEnumsHash,
            queryFetcher: configQueryFetcher !== null && configQueryFetcher !== void 0 ? configQueryFetcher : createQueryFetcher(applyRequestContext),
            ...(0, omit_js_1.default)(clientConfig, 'context', 'applyRequestContext', 'authQueryFetcher', 'schema', 'scalarsEnumsHash'),
        }),
        auth: {
            ...(0, gqty_1.createClient)({
                schema,
                scalarsEnumsHash,
                queryFetcher: configAuthQueryFetcher !== null && configAuthQueryFetcher !== void 0 ? configAuthQueryFetcher : createAuthQueryFetcher(context, applyRequestContext),
                ...(0, omit_js_1.default)(clientConfig, 'context', 'applyRequestContext', 'authQueryFetcher', 'schema', 'scalarsEnumsHash'),
            }),
        },
    };
    if ((0, isObject_js_1.default)(clientConfig.context)) {
        clientConfig.context.apiClient = apiClient;
    }
    return apiClient;
}
exports.getClient = getClient;
/* eslint-enable @typescript-eslint/ban-types */
