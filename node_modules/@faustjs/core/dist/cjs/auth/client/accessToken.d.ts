export interface AccessToken {
    token: string | undefined;
    expiration: number | undefined;
}
/**
 * Get an access token from memory if one exists
 *
 * @returns {string | undefined}
 */
export declare function getAccessToken(): string | undefined;
/**
 * Get an access token expiration from memory if one exists
 *
 * @returns {number | undefined}
 */
export declare function getAccessTokenExpiration(): number | undefined;
/**
 * Set an access token and/or its expiration in memory
 *
 * @param {string} token
 * @param {number} expiration
 *
 * @returns {void}
 */
export declare function setAccessToken(token: string | undefined, expiration: number | undefined): void;
/**
 * Fetch an access token from the authorizeHandler middleware
 *
 * @export
 * @param {string} code An authorization code to fetch an access token
 */
export declare function fetchAccessToken(code?: string): Promise<string | null>;
/**
 * The interval (in ms) in which the access token is check if a new one
 * needs to be fetched
 */
export declare const ACCESS_TOKEN_EXP_CHECK_INTERVAL_MS = 15000;
/**
 * The difference in seconds between the current time and the expiration
 * which the access token should be re-fetched
 */
export declare const TIME_DIFF_TO_FETCH_TOKEN = 60;
