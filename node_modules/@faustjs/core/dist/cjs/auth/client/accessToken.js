"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIME_DIFF_TO_FETCH_TOKEN = exports.ACCESS_TOKEN_EXP_CHECK_INTERVAL_MS = exports.fetchAccessToken = exports.setAccessToken = exports.getAccessTokenExpiration = exports.getAccessToken = void 0;
const index_js_1 = require("../../config/index.js");
const index_js_2 = require("../../utils/index.js");
const isNil_js_1 = __importDefault(require("lodash/isNil.js"));
const isString_js_1 = __importDefault(require("lodash/isString.js"));
let accessToken;
/**
 * Get an access token from memory if one exists
 *
 * @returns {string | undefined}
 */
function getAccessToken() {
    return accessToken === null || accessToken === void 0 ? void 0 : accessToken.token;
}
exports.getAccessToken = getAccessToken;
/**
 * Get an access token expiration from memory if one exists
 *
 * @returns {number | undefined}
 */
function getAccessTokenExpiration() {
    return accessToken === null || accessToken === void 0 ? void 0 : accessToken.expiration;
}
exports.getAccessTokenExpiration = getAccessTokenExpiration;
/**
 * Set an access token and/or its expiration in memory
 *
 * @param {string} token
 * @param {number} expiration
 *
 * @returns {void}
 */
function setAccessToken(token, expiration) {
    if ((0, index_js_2.isServerSide)()) {
        return;
    }
    accessToken = {
        token,
        expiration,
    };
}
exports.setAccessToken = setAccessToken;
/**
 * Fetch an access token from the authorizeHandler middleware
 *
 * @export
 * @param {string} code An authorization code to fetch an access token
 */
async function fetchAccessToken(code) {
    const { apiBasePath } = (0, index_js_1.config)();
    if ((0, isNil_js_1.default)(apiBasePath)) {
        throw new Error('You must provide an apiBasePath value in your Faust.js config in order to use the fetchToken middleware');
    }
    let url = `${apiBasePath}/${index_js_1.TOKEN_ENDPOINT_PARTIAL_PATH}`;
    // Add the code to the url if it exists
    if ((0, isString_js_1.default)(code) && code.length > 0) {
        url += `?code=${code}`;
    }
    try {
        const response = await fetch(url, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        });
        const result = (await response.json());
        // If the response is not ok, clear the access token
        if (!response.ok) {
            setAccessToken(undefined, undefined);
            return null;
        }
        setAccessToken(result.accessToken, result.accessTokenExpiration);
        return result.accessToken;
    }
    catch (error) {
        setAccessToken(undefined, undefined);
        return null;
    }
}
exports.fetchAccessToken = fetchAccessToken;
/**
 * The interval (in ms) in which the access token is check if a new one
 * needs to be fetched
 */
exports.ACCESS_TOKEN_EXP_CHECK_INTERVAL_MS = 15000;
/**
 * The difference in seconds between the current time and the expiration
 * which the access token should be re-fetched
 */
exports.TIME_DIFF_TO_FETCH_TOKEN = 60;
/**
 * Continuously check if the access token is close to
 * expiration and fetch a new one if needed.
 */
setInterval(() => {
    if (!(accessToken === null || accessToken === void 0 ? void 0 : accessToken.token) || !(accessToken === null || accessToken === void 0 ? void 0 : accessToken.expiration)) {
        return;
    }
    const currentTime = Math.floor(Date.now() / 1000);
    // Only refetch the token if it's 60 seconds before its expiration
    if (currentTime + exports.TIME_DIFF_TO_FETCH_TOKEN < accessToken.expiration) {
        return;
    }
    void fetchAccessToken();
}, exports.ACCESS_TOKEN_EXP_CHECK_INTERVAL_MS);
