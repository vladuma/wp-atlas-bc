export * from './schema.generated.js';
import { createClient, } from 'gqty';
import fetch from 'isomorphic-fetch';
import isFunction from 'lodash/isFunction.js';
import isNil from 'lodash/isNil.js';
import isObject from 'lodash/isObject.js';
import omit from 'lodash/omit.js';
import { getAccessToken } from '../auth/index.js';
import { getGqlUrl } from '../config/config.js';
export function createQueryFetcher(applyRequestContext) {
    return async function (query, variables) {
        const url = getGqlUrl();
        const headers = {
            'Content-Type': 'application/json',
        };
        const init = {
            method: 'POST',
            headers,
            body: JSON.stringify({
                query,
                variables,
            }),
            mode: 'cors',
        };
        let requestContext = { url, init };
        if (isFunction(applyRequestContext)) {
            requestContext = await applyRequestContext(url, init);
        }
        const response = await fetch(requestContext.url, requestContext.init);
        const json = await response.json();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return json;
    };
}
export function createAuthQueryFetcher(context, applyRequestContext) {
    const applyRequestContextFn = async (url, init) => {
        let token;
        if (!isNil(context)) {
            const { Cookies } = await import('../server/auth/cookie.js');
            const { OAuth } = await import('../server/auth/token.js');
            const oauth = new OAuth(new Cookies(context));
            const oauthTokens = await oauth.fetch();
            if (oauth.isOAuthTokens(oauthTokens)) {
                token = oauthTokens.accessToken;
            }
        }
        else {
            token = getAccessToken();
        }
        init.headers = Object.assign({ Authorization: `Bearer ${token}` }, init.headers);
        let requestContext = { url, init };
        if (isFunction(applyRequestContext)) {
            requestContext = await applyRequestContext(url, init);
        }
        return requestContext;
    };
    return createQueryFetcher(applyRequestContextFn);
}
export function contextHasClient(context) {
    return (isObject(context) &&
        isObject(context.apiClient));
}
/* eslint-disable @typescript-eslint/ban-types */
export function getClient(clientConfig) {
    const { context, schema, scalarsEnumsHash, queryFetcher: configQueryFetcher, authQueryFetcher: configAuthQueryFetcher, applyRequestContext, } = clientConfig;
    if (contextHasClient(context)) {
        return context.apiClient;
    }
    if (isNil(schema) || isNil(scalarsEnumsHash)) {
        throw new Error('You must specify a schema and scalarEnumsHash in order to create a client.');
    }
    const apiClient = {
        ...createClient({
            schema,
            scalarsEnumsHash,
            queryFetcher: configQueryFetcher ?? createQueryFetcher(applyRequestContext),
            ...omit(clientConfig, 'context', 'applyRequestContext', 'authQueryFetcher', 'schema', 'scalarsEnumsHash'),
        }),
        auth: {
            ...createClient({
                schema,
                scalarsEnumsHash,
                queryFetcher: configAuthQueryFetcher ??
                    createAuthQueryFetcher(context, applyRequestContext),
                ...omit(clientConfig, 'context', 'applyRequestContext', 'authQueryFetcher', 'schema', 'scalarsEnumsHash'),
            }),
        },
    };
    if (isObject(clientConfig.context)) {
        clientConfig.context.apiClient = apiClient;
    }
    return apiClient;
}
/* eslint-enable @typescript-eslint/ban-types */
