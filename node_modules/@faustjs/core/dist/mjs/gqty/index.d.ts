/// <reference types="node" />
export * from './schema.generated.js';
import { ClientOptions, GQtyClient, QueryFetcher, ScalarsEnumsHash, Schema as GQtySchema } from 'gqty';
import type { IncomingMessage } from 'http';
export interface GqlClientSchema {
    query: any;
    mutation: any;
    subscription: any;
}
export interface RequestContext {
    url: string;
    init: RequestInit;
}
export declare function createQueryFetcher(applyRequestContext?: ClientConfig['applyRequestContext']): QueryFetcher;
export declare function createAuthQueryFetcher(context?: IncomingMessage, applyRequestContext?: ClientConfig['applyRequestContext']): QueryFetcher;
export interface ClientConfig<Schema extends GqlClientSchema = never, ObjectTypesNames extends string = never, SchemaObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never> extends Omit<ClientOptions<ObjectTypesNames, SchemaObjectTypes>, 'schema' | 'scalarsEnumsHash' | 'queryFetcher'> {
    schema?: Readonly<GQtySchema>;
    scalarsEnumsHash?: ScalarsEnumsHash;
    queryFetcher?: QueryFetcher;
    authQueryFetcher?: QueryFetcher;
    context?: WithClient<IncomingMessage, Schema>;
    /**
     * Called before every request, use this to apply any headers you might
     * need to for your requests or adjust the request to suite your needs.
     *
     * @param {string} url
     * @param {RequestInit} init
     * @returns {RequestContext}
     * @memberof ClientConfig
     */
    applyRequestContext?(url: string, init: RequestInit): Promise<RequestContext> | RequestContext;
}
export interface ApiClient<Schema extends GqlClientSchema> extends GQtyClient<Schema> {
    auth: GQtyClient<Schema>;
}
export declare type WithClient<Type, Schema extends GqlClientSchema> = Type & {
    apiClient?: ApiClient<Schema>;
};
export declare function contextHasClient<Schema extends GqlClientSchema>(context?: IncomingMessage): context is WithClient<IncomingMessage, Schema> & Required<Pick<WithClient<IncomingMessage, Schema>, 'apiClient'>>;
export declare function getClient<Schema extends GqlClientSchema = never, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never>(clientConfig: ClientConfig<Schema, ObjectTypesNames, ObjectTypes>): ApiClient<Schema>;
