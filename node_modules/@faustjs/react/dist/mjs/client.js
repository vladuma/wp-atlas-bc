import { getClient as getCoreClient } from '@faustjs/core';
import { createReactClient, } from '@gqty/react';
import isObject from 'lodash/isObject.js';
import merge from 'lodash/merge.js';
/* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
export function getClient(clientConfig, createReactClientOpts) {
    const client = getCoreClient(clientConfig);
    let reactClientOpts = {
        defaults: {
            // Set this flag as "true" if your usage involves React Suspense
            // Keep in mind that you can overwrite it in a per-hook basis
            suspense: false,
            // Set this flag based on your needs
            staleWhileRevalidate: false,
        },
    };
    if (isObject(createReactClientOpts)) {
        reactClientOpts = merge(reactClientOpts, createReactClientOpts);
    }
    const reactClient = createReactClient(client, reactClientOpts);
    const authReactClient = createReactClient(client.auth, reactClientOpts);
    const fullClient = {
        client,
        ...reactClient,
        auth: {
            client: client.auth,
            ...authReactClient,
            useIsLoading() {
                return authReactClient.useQuery().$state.isLoading;
            },
        },
        useIsLoading() {
            return reactClient.useQuery().$state.isLoading;
        },
    };
    return fullClient;
}
