import { ClientConfig } from '@faustjs/core';
import type { CategoryIdType, Maybe, PageIdType, PostIdType, ContentNodeIdTypeEnum, ContentTypeEnum } from '@faustjs/core/client';
import { CreateReactClientOptions, ReactClient as GQtyReactClient } from '@gqty/react';
import { GQtyClient } from 'gqty';
export interface Node {
    id?: string | null;
    __typename?: string | null;
}
export interface WithRevisions {
    revisions: (arg0: {
        first?: number;
    }) => Maybe<{
        edges?: Maybe<Maybe<{
            node?: Maybe<Node>;
        }>[]>;
    }>;
}
export interface WithOn {
    $on: any;
}
export interface RequiredQuery {
    posts: (args?: {
        where?: {
            categoryId?: number;
            categoryName?: string;
        };
    }) => unknown;
    post: (args: {
        id: string;
        idType?: PostIdType;
    }) => (Node & WithRevisions) | null | undefined;
    pages: (args?: any) => unknown;
    page: (args: {
        id: string;
        idType?: PageIdType;
    }) => (Node & WithRevisions) | null | undefined;
    category: (args: {
        id: string;
        idType?: CategoryIdType;
    }) => Node | null | undefined;
    contentNode: (args: {
        id: string;
        idType?: ContentNodeIdTypeEnum;
        contentType?: ContentTypeEnum;
        asPreview?: boolean;
    }) => (Node & WithOn) | null | undefined;
    generalSettings?: unknown;
}
export interface RequiredSchema {
    query: RequiredQuery;
    mutation: any;
    subscription: any;
}
export interface ReactClient<Schema extends RequiredSchema> extends GQtyReactClient<Schema> {
    client: GQtyClient<Schema>;
    auth: Omit<ReactClient<Schema>, 'auth'>;
    useIsLoading(): boolean;
}
export declare function getClient<Schema extends RequiredSchema, ObjectTypesNames extends string = never, ObjectTypes extends {
    [P in ObjectTypesNames]: {
        __typename?: P;
    };
} = never>(clientConfig: ClientConfig<Schema, ObjectTypesNames, ObjectTypes>, createReactClientOpts?: CreateReactClientOptions): ReactClient<Schema>;
