"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClient = void 0;
const core_1 = require("@faustjs/core");
const react_1 = require("@gqty/react");
const isObject_js_1 = __importDefault(require("lodash/isObject.js"));
const merge_js_1 = __importDefault(require("lodash/merge.js"));
/* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
function getClient(clientConfig, createReactClientOpts) {
    const client = (0, core_1.getClient)(clientConfig);
    let reactClientOpts = {
        defaults: {
            // Set this flag as "true" if your usage involves React Suspense
            // Keep in mind that you can overwrite it in a per-hook basis
            suspense: false,
            // Set this flag based on your needs
            staleWhileRevalidate: false,
        },
    };
    if ((0, isObject_js_1.default)(createReactClientOpts)) {
        reactClientOpts = (0, merge_js_1.default)(reactClientOpts, createReactClientOpts);
    }
    const reactClient = (0, react_1.createReactClient)(client, reactClientOpts);
    const authReactClient = (0, react_1.createReactClient)(client.auth, reactClientOpts);
    const fullClient = {
        client,
        ...reactClient,
        auth: {
            client: client.auth,
            ...authReactClient,
            useIsLoading() {
                return authReactClient.useQuery().$state.isLoading;
            },
        },
        useIsLoading() {
            return reactClient.useQuery().$state.isLoading;
        },
    };
    return fullClient;
}
exports.getClient = getClient;
