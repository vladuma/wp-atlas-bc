'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const parserJSON = require('prettier/parser-babel.js');
const parserGraphQL = require('prettier/parser-graphql.js');
const prettier = require('prettier/standalone.js');
const serializeError = require('./serializeError.js');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

const parserJSON__default = /*#__PURE__*/_interopDefault(parserJSON);
const parserGraphQL__default = /*#__PURE__*/_interopDefault(parserGraphQL);
const prettier__default = /*#__PURE__*/_interopDefault(prettier);

function parseGraphQL(query) {
  return prettier__default["default"].format(query, {
    parser: "graphql",
    plugins: [parserGraphQL__default["default"]]
  });
}
function isTruthy(v) {
  return Boolean(v);
}
const format = (...parts) => {
  const texts = [];
  const styles = [];
  for (const [text, style] of parts.filter(isTruthy)) {
    texts.push(text);
    styles.push(`font-weight: normal; ${style}`);
  }
  return [`%c${texts.join("%c")}`, ...styles];
};
function createLogger(client, options = {}) {
  var _a, _b, _c;
  options = Object.assign({}, options);
  (_a = options.showCache) != null ? _a : options.showCache = true;
  (_b = options.showSelections) != null ? _b : options.showSelections = true;
  (_c = options.stringifyJSON) != null ? _c : options.stringifyJSON = false;
  const stringifyJSONIfEnabled = (v) => {
    if (options.stringifyJSON) {
      return prettier__default["default"].format(JSON.stringify(v), {
        parser: "json",
        plugins: [parserJSON__default["default"]]
      });
    }
    return v;
  };
  const eventHandler = client.eventHandler;
  let idMapper = 0;
  const QueryIdMapper = {};
  async function onFetch(dataPromise) {
    const startTime = Date.now();
    const {
      query,
      variables,
      error,
      selections,
      executionResult,
      cacheSnapshot,
      type,
      label
    } = await dataPromise;
    const queryId = QueryIdMapper[query] || (QueryIdMapper[query] = ++idMapper);
    const fetchTime = Date.now() - startTime;
    console.groupCollapsed(...format(["GraphQL ", "color: gray"], [type + " ", `color: ${error ? "red" : "#03A9F4"}; font-weight: bold`], ["ID " + queryId + " ", "color: green"], ...label ? [[label + " ", "color: green"]] : [], [`(${fetchTime}ms)`, "color: gray"], [` ${selections.length} selections`, "color: gray"], error && [
      "FAILED",
      "margin-left: 10px; border-radius: 2px; padding: 2px 6px; background: #e84343; color: white"
    ]));
    const headerStyles = `font-weight: bold; color: #f316c1`;
    if (query) {
      console.group(...format(["Query ", headerStyles], ["  ", `background-image: url(https://graphql.org/img/logo.svg)`]));
      if (variables) {
        console.log(...format(["Variables", "color: #25e1e1"]), stringifyJSONIfEnabled(variables));
      }
      console.log(...format([parseGraphQL(query)]));
      console.groupEnd();
    }
    if (error) {
      console.error(...format(["Error", headerStyles]), serializeError.serializeError(error));
    } else if (executionResult) {
      console.log(...format(["Result", headerStyles]), stringifyJSONIfEnabled(executionResult));
    }
    if (options.showSelections) {
      console.groupCollapsed(...format(["Selections", headerStyles]));
      selections.forEach(({ id, cachePath, key, pathString, alias, argTypes, args, unions }) => {
        console.log(stringifyJSONIfEnabled({
          id,
          cachePath,
          key,
          pathString,
          alias,
          argTypes,
          args,
          unions
        }));
      });
      console.groupEnd();
    }
    if (options.showCache) {
      console.log(...format(["Cache snapshot", headerStyles]), stringifyJSONIfEnabled(cacheSnapshot));
      console.groupEnd();
    }
  }
  function start() {
    const unsubscribe = eventHandler.onFetchSubscribe(onFetch);
    return unsubscribe;
  }
  return {
    start,
    options
  };
}

exports.createLogger = createLogger;
