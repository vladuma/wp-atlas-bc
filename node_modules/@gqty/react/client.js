'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const useMetaState = require('./meta/useMetaState.js');
const useMutation = require('./mutation/useMutation.js');
const hoc = require('./query/hoc.js');
const preparedQuery = require('./query/preparedQuery.js');
const useLazyQuery = require('./query/useLazyQuery.js');
const useQuery = require('./query/useQuery.js');
const useRefetch = require('./query/useRefetch.js');
const useTransactionQuery = require('./query/useTransactionQuery.js');
const ssr = require('./ssr/ssr.js');
const useSubscription = require('./subscription/useSubscription.js');
const usePaginatedQuery = require('./query/usePaginatedQuery.js');

function createReactClient(client, optsCreate = {}) {
  const { suspense = false } = optsCreate.defaults || (optsCreate.defaults = {});
  const {
    transactionFetchPolicy = "cache-first",
    lazyFetchPolicy = "network-only",
    staleWhileRevalidate = false,
    retry = true,
    lazyQuerySuspense = false,
    transactionQuerySuspense = suspense,
    mutationSuspense = false,
    preparedSuspense = suspense,
    refetchAfterHydrate = false,
    paginatedQueryFetchPolicy = "cache-first",
    paginatedQuerySuspense = suspense
  } = optsCreate.defaults;
  const defaults = {
    transactionFetchPolicy,
    lazyFetchPolicy,
    staleWhileRevalidate,
    suspense,
    retry,
    lazyQuerySuspense,
    transactionQuerySuspense,
    mutationSuspense,
    preparedSuspense,
    refetchAfterHydrate,
    paginatedQueryFetchPolicy,
    paginatedQuerySuspense
  };
  const opts = Object.assign({}, optsCreate, {
    defaults
  });
  const state = new Proxy({
    isLoading: false
  }, {
    get(target, key, receiver) {
      if (key === "isLoading")
        return Boolean(client.scheduler.resolving);
      return Reflect.get(target, key, receiver);
    }
  });
  const { prepareReactRender, useHydrateCache } = ssr.createSSRHelpers(client, opts);
  return {
    useQuery: useQuery.createUseQuery(client, opts),
    useRefetch: useRefetch.createUseRefetch(client, opts),
    useLazyQuery: useLazyQuery.createUseLazyQuery(client, opts),
    useTransactionQuery: useTransactionQuery.createUseTransactionQuery(client, opts),
    usePaginatedQuery: usePaginatedQuery.createUsePaginatedQuery(client, opts),
    useMutation: useMutation.createUseMutation(client, opts),
    graphql: hoc.createGraphqlHOC(client, opts),
    state,
    prepareReactRender,
    useHydrateCache,
    useMetaState: useMetaState.createUseMetaState(client),
    useSubscription: useSubscription.createUseSubscription(client),
    prepareQuery: preparedQuery.createPrepareQuery(client, opts)
  };
}

exports.createReactClient = createReactClient;
