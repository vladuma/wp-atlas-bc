import { GQtyClient, GQtyError, RetryOptions } from 'gqty';
import { OnErrorHandler } from '../common';
import type { ReactClientOptionsWithDefaults } from '../utils';
export interface UseMutationOptions<TData> {
    noCache?: boolean;
    onCompleted?: (data: TData) => void;
    onError?: OnErrorHandler;
    /**
     * Retry behaviour
     *
     * @default false
     */
    retry?: RetryOptions;
    /**
     * Refetch specific queries after mutation completion.
     *
     * You can give functions or parts of the schema to be refetched
     */
    refetchQueries?: unknown[];
    /**
     * Await refetch resolutions before calling the mutation actually complete
     */
    awaitRefetchQueries?: boolean;
    /**
     * Enable suspense behavior
     */
    suspense?: boolean;
    /**
     * Activate special handling of non-serializable variables,
     * for example, files uploading
     *
     * @default false
     */
    nonSerializableVariables?: boolean;
}
export interface UseMutationState<TData> {
    data: TData | undefined;
    error?: GQtyError;
    isLoading: boolean;
}
export interface UseMutation<GeneratedSchema extends {
    mutation: object;
}> {
    <TData = unknown, TArgs = undefined>(mutationFn?: (mutation: GeneratedSchema['mutation'], args: TArgs) => TData, options?: UseMutationOptions<TData>): readonly [
        (...opts: undefined extends TArgs ? [
            {
                fn?: (mutation: GeneratedSchema['mutation'], args: TArgs) => TData;
                args?: TArgs;
            }?
        ] : [
            {
                fn?: (mutation: GeneratedSchema['mutation'], args: TArgs) => TData;
                args: TArgs;
            }
        ]) => Promise<TData>,
        UseMutationState<TData>
    ];
}
export declare function createUseMutation<GeneratedSchema extends {
    mutation: object;
    query: object;
    subscription: object;
}>(client: GQtyClient<GeneratedSchema>, { defaults: { mutationSuspense: defaultSuspense }, }: ReactClientOptionsWithDefaults): UseMutation<GeneratedSchema>;
