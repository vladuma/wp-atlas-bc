import type { GQtyClient, HydrateCacheOptions } from 'gqty';
import * as React from 'react';
import { ReactClientOptionsWithDefaults } from '../utils';
export interface UseHydrateCacheOptions extends Partial<HydrateCacheOptions> {
    /**
     * Cache snapshot, returned from `prepareReactRender`
     */
    cacheSnapshot: string | undefined;
    /**
     * If it should refetch everything after the component is mounted
     *
     * @default
     * false
     */
    shouldRefetch?: boolean;
}
/**
 * Props with `cacheSnapshot` that would be returned from `prepareReactRender`
 */
export declare type PropsWithServerCache<T extends Record<string | number, unknown> = {}> = {
    /**
     * Cache snapshot, returned from `prepareReactRender`
     */
    cacheSnapshot?: string;
} & T;
export interface UseHydrateCache {
    ({ cacheSnapshot, shouldRefetch }: UseHydrateCacheOptions): void;
}
export interface PrepareReactRender {
    (element: React.ReactNode): Promise<{
        cacheSnapshot: string;
    }>;
}
export declare function createSSRHelpers(client: GQtyClient<any>, { defaults: { refetchAfterHydrate } }: ReactClientOptionsWithDefaults): {
    useHydrateCache: UseHydrateCache;
    prepareReactRender: PrepareReactRender;
};
