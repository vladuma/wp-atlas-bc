'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const common = require('../common.js');

function createUseSubscription(client, _opts) {
  const {
    interceptorManager: { createInterceptor, removeInterceptor },
    subscriptionsClient,
    eventHandler,
    scheduler
  } = client;
  const clientSubscription = client.subscription;
  const useSubscription = function useSubscription2() {
    const forceUpdate = common.useForceUpdate({
      doTimeout: true
    });
    const hookSelections = common.useSelectionsState();
    const interceptor = createInterceptor();
    Promise.resolve(interceptor).then(removeInterceptor);
    interceptor.selectionAddListeners.add((selection) => {
      if (selection.type === 2)
        hookSelections.add(selection);
    });
    common.useIsomorphicLayoutEffect(() => {
      removeInterceptor(interceptor);
    });
    common.useIsomorphicLayoutEffect(() => {
      if (!subscriptionsClient)
        return;
      let isMounted = true;
      const unsubscribeCache = eventHandler.onCacheChangeSubscribe(({ selection }) => {
        if (!isMounted || forceUpdate.wasCalled.current)
          return;
        if (hookSelections.has(selection))
          forceUpdate();
      });
      const unsubErrors = scheduler.errors.subscribeErrors((data) => {
        if (isMounted && data.type === "new_error" && !forceUpdate.wasCalled.current && common.isAnySelectionIncluded(data.selections, hookSelections)) {
          forceUpdate();
        }
      });
      return () => {
        isMounted = false;
        unsubErrors();
        unsubscribeCache();
        subscriptionsClient.unsubscribe(hookSelections).then((operationsIds) => {
          if (eventHandler.hasFetchSubscribers && operationsIds.length) {
            const arraySelections = Array.from(hookSelections);
            for (const id of operationsIds) {
              eventHandler.sendFetchPromise(Promise.resolve({
                query: "",
                variables: void 0,
                cacheSnapshot: client.cache,
                selections: arraySelections,
                type: "subscription",
                label: `[id=${id}] [unsubscribe]`
              }), arraySelections);
            }
          }
        });
      };
    }, [hookSelections, forceUpdate]);
    return clientSubscription;
  };
  return useSubscription;
}

exports.createUseSubscription = createUseSubscription;
