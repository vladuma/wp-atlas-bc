import type { GQtyClient, GQtyError, Selection } from 'gqty';
import type { SchedulerPromiseValue } from 'gqty/Scheduler';
import { BuildSelections } from '../common';
export interface UseMetaStateOptions<T> {
    onStartFetching?: () => void;
    onDoneFetching?: () => void;
    onError?: (data: {
        newError: GQtyError;
        selections: Selection[];
        isLastTry: boolean;
    }) => void;
    onRetry?: (data: {
        retryPromise: Promise<SchedulerPromiseValue>;
        selections: Set<Selection>;
    }) => void;
    filterSelections?: BuildSelections<T>;
}
export interface MetaState {
    isFetching: boolean;
    errors?: GQtyError[];
}
export interface UseMetaState {
    <T>(opts?: UseMetaStateOptions<T>): MetaState;
}
export declare function createUseMetaState(client: GQtyClient<any>): UseMetaState;
