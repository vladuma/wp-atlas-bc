import { GQtyClient, GQtyError, RetryOptions } from 'gqty';
import type { ReactClientOptionsWithDefaults } from '../utils';
interface UseRefetchReducerState {
    isLoading: boolean;
    error?: GQtyError;
}
export interface UseRefetchState extends UseRefetchReducerState {
    startWatching: () => void;
    stopWatching: () => void;
}
export interface UseRefetchOptions {
    notifyOnNetworkStatusChange?: boolean;
    startWatching?: boolean;
    retry?: RetryOptions;
}
export interface UseRefetch {
    (refetchOptions?: UseRefetchOptions): (<T = void>(refetchArg?: T | (() => T)) => Promise<T | undefined>) & UseRefetchState;
}
export declare function createUseRefetch(client: GQtyClient<any>, { defaults: { retry: defaultRetry } }: ReactClientOptionsWithDefaults): UseRefetch;
export {};
