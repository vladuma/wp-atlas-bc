import { GQtyClient, GQtyError, prepass } from 'gqty';
import { OnErrorHandler } from '../common';
import type { ReactClientOptionsWithDefaults } from '../utils';
export interface UseQueryPrepareHelpers<GeneratedSchema extends {
    query: object;
}> {
    readonly prepass: typeof prepass;
    readonly query: GeneratedSchema['query'];
}
export interface UseQueryOptions<GeneratedSchema extends {
    query: object;
} = never> {
    suspense?: boolean;
    staleWhileRevalidate?: boolean | object | number | string | null;
    onError?: OnErrorHandler;
    prepare?: (helpers: UseQueryPrepareHelpers<GeneratedSchema>) => void;
}
export interface UseQueryState {
    /**
     * Useful for `Non-Suspense` usage.
     */
    readonly isLoading: boolean;
    /**
     * Latest scheduler Error, for more in-depth error management use `useMetaState` hook
     */
    error?: GQtyError;
}
export declare type UseQueryReturnValue<GeneratedSchema extends {
    query: object;
}> = GeneratedSchema['query'] & {
    $state: UseQueryState;
};
export interface UseQuery<GeneratedSchema extends {
    query: object;
}> {
    (options?: UseQueryOptions<GeneratedSchema>): UseQueryReturnValue<GeneratedSchema>;
}
export declare function createUseQuery<GeneratedSchema extends {
    query: object;
    mutation: object;
    subscription: object;
}>(client: GQtyClient<GeneratedSchema>, opts: ReactClientOptionsWithDefaults): UseQuery<GeneratedSchema>;
