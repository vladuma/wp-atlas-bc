import { GQtyClient, GQtyError, RetryOptions } from 'gqty';
import { FetchPolicy, OnErrorHandler } from '../common';
import type { ReactClientOptionsWithDefaults } from '../utils';
export interface UseTransactionQueryState<TData> {
    data: TData | undefined;
    error?: GQtyError;
    isLoading: boolean;
    isCalled: boolean;
}
export declare type UseTransactionQueryOptions<TData, TVariables> = {
    fetchPolicy?: FetchPolicy;
    skip?: boolean;
    /**
     * Frequency in milliseconds of polling/refetch of the query
     */
    pollInterval?: number;
    /**
     * If it should do polling while on background
     *
     * @default false
     */
    pollInBackground?: boolean;
    notifyOnNetworkStatusChange?: boolean;
    variables?: TVariables;
    onCompleted?: (data: TData) => void;
    onError?: OnErrorHandler;
    retry?: RetryOptions;
    suspense?: boolean;
} & (TVariables extends undefined ? {
    variables?: TVariables;
} : {
    variables: TVariables;
});
export interface UseTransactionQuery<GeneratedSchema extends {
    query: object;
}> {
    <TData, TVariables = undefined>(fn: (query: GeneratedSchema['query'], variables: TVariables) => TData, ...[queryOptions]: undefined extends TVariables ? [UseTransactionQueryOptions<TData, TVariables>?] : [UseTransactionQueryOptions<TData, TVariables>]): UseTransactionQueryState<TData>;
}
export declare function createUseTransactionQuery<GeneratedSchema extends {
    query: object;
    mutation: object;
    subscription: object;
}>(client: GQtyClient<GeneratedSchema>, { defaults: { transactionFetchPolicy: defaultFetchPolicy, retry: defaultRetry, transactionQuerySuspense: defaultSuspense, }, }: ReactClientOptionsWithDefaults): UseTransactionQuery<GeneratedSchema>;
