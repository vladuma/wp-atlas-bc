import type { GQtyClient, GQtyError } from 'gqty';
import type { ReactClientOptionsWithDefaults } from '../utils';
export interface UsePreparedQueryOptions {
    suspense?: boolean;
}
export interface PreparedQuery<GeneratedSchema extends {
    query: object;
}, TFunction extends (query: GeneratedSchema['query'], args: any) => any> {
    preload(...[args]: undefined extends Parameters<TFunction>['1'] ? [Parameters<TFunction>['1']?] : [Parameters<TFunction>['1']]): Promise<ReturnType<TFunction>>;
    refetch(...[args]: undefined extends Parameters<TFunction>['1'] ? [Parameters<TFunction>['1']?] : [Parameters<TFunction>['1']]): Promise<ReturnType<TFunction>>;
    usePrepared(opts?: UsePreparedQueryOptions): {
        data: ReturnType<TFunction> | undefined;
        error?: GQtyError | undefined;
        isLoading: boolean;
        isRefetching: boolean;
        called: boolean;
    };
    callback: TFunction;
}
export interface PrepareQuery<GeneratedSchema extends {
    query: object;
}> {
    <TFunction extends (query: GeneratedSchema['query'], args: any) => any>(fn: TFunction): PreparedQuery<GeneratedSchema, TFunction>;
}
export declare function createPrepareQuery<GeneratedSchema extends {
    query: object;
    mutation: object;
    subscription: object;
}>({ prefetch, query, refetch: refetchClient }: GQtyClient<GeneratedSchema>, { defaults: { preparedSuspense: defaultSuspense }, }: ReactClientOptionsWithDefaults): PrepareQuery<GeneratedSchema>;
