import { useIsMounted, useForceUpdate, useIsomorphicLayoutEffect } from '../common.mjs';

function createPrepareQuery({ prefetch, query, refetch: refetchClient }, {
  defaults: { preparedSuspense: defaultSuspense }
}) {
  const emptyDataSymbol = Symbol();
  const prepareQuery = function prepareQuery2(fn) {
    const state = {
      data: emptyDataSymbol,
      isLoading: false,
      isRefetching: false,
      called: false
    };
    let promiseOnTheFly;
    const subscribers = new Set();
    function updateSubs() {
      setTimeout(() => {
        if (subscribers.size) {
          for (const cb of subscribers)
            cb();
        }
      }, 0);
    }
    async function refetch(...[args]) {
      state.called = true;
      state.isLoading = true;
      state.isRefetching = true;
      updateSubs();
      try {
        await refetchClient(() => fn(query, args));
        return await preload(args);
      } finally {
        state.isLoading = false;
        state.isRefetching = false;
      }
    }
    async function preload(...[args]) {
      state.called = true;
      state.isLoading = true;
      try {
        const result = prefetch((query2) => fn(query2, args));
        if (result instanceof Promise) {
          promiseOnTheFly = result;
          updateSubs();
          result.schedulerPromise.then(({ error }) => {
            if (error) {
              state.error = error;
            } else {
              delete state.error;
            }
          });
          const data = state.data = await result;
          if (promiseOnTheFly === result)
            promiseOnTheFly = void 0;
          return data;
        } else {
          delete state.error;
        }
        return state.data = result;
      } finally {
        state.isLoading = false;
        updateSubs();
      }
    }
    function usePrepared({
      suspense = defaultSuspense
    } = {}) {
      const isMounted = useIsMounted();
      const forceUpdate = useForceUpdate();
      if (promiseOnTheFly) {
        const promise = promiseOnTheFly.then(() => {
          if (isMounted.current)
            forceUpdate();
        });
        if (suspense)
          throw promise;
      }
      useIsomorphicLayoutEffect(() => {
        let isMounted2 = true;
        const cb = () => isMounted2 && forceUpdate();
        subscribers.add(cb);
        return () => {
          isMounted2 = false;
          subscribers.delete(cb);
        };
      }, [forceUpdate]);
      return {
        ...state,
        data: state.data !== emptyDataSymbol ? state.data : void 0
      };
    }
    return {
      preload,
      refetch,
      usePrepared,
      callback: fn
    };
  };
  return prepareQuery;
}

export { createPrepareQuery };
