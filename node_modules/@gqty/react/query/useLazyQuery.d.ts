import { GQtyClient, GQtyError, RetryOptions } from 'gqty';
import { FetchPolicy, OnErrorHandler } from '../common';
import type { ReactClientOptionsWithDefaults } from '../utils';
export declare type LazyFetchPolicy = Exclude<FetchPolicy, 'cache-first'>;
export interface UseLazyQueryOptions<TData> {
    onCompleted?: (data: TData) => void;
    onError?: OnErrorHandler;
    fetchPolicy?: LazyFetchPolicy;
    retry?: RetryOptions;
    suspense?: boolean;
}
export interface UseLazyQueryState<TData> {
    data: TData | undefined;
    error?: GQtyError;
    isLoading: boolean;
    isCalled: boolean;
}
export interface UseLazyQuery<GeneratedSchema extends {
    query: object;
}> {
    <TData = unknown, TArgs = undefined>(queryFn: (query: GeneratedSchema['query'], args: TArgs) => TData, options?: UseLazyQueryOptions<TData>): readonly [
        (...opts: undefined extends TArgs ? [
            {
                fn?: (query: GeneratedSchema['query'], args: TArgs) => TData;
                args?: TArgs;
                fetchPolicy?: LazyFetchPolicy;
            }?
        ] : [
            {
                fn?: (query: GeneratedSchema['query'], args: TArgs) => TData;
                args: TArgs;
                fetchPolicy?: LazyFetchPolicy;
            }
        ]) => Promise<TData>,
        UseLazyQueryState<TData>
    ];
}
export declare function createUseLazyQuery<GeneratedSchema extends {
    query: object;
    mutation: object;
    subscription: object;
}>(client: GQtyClient<GeneratedSchema>, { defaults: { retry: defaultRetry, lazyQuerySuspense: defaultSuspense, lazyFetchPolicy: defaultFetchPolicy, }, }: ReactClientOptionsWithDefaults): UseLazyQuery<GeneratedSchema>;
