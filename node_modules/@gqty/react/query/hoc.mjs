import * as React from 'react';
import { useInterceptSelections } from '../common.mjs';

function createGraphqlHOC({ scheduler, eventHandler, interceptorManager }, {
  defaults: {
    suspense: defaultSuspense,
    staleWhileRevalidate: defaultStaleWhileRevalidate
  }
}) {
  const graphql = function graphql2(component, {
    suspense = defaultSuspense,
    staleWhileRevalidate = defaultStaleWhileRevalidate,
    onError
  } = {}) {
    const withGraphQL = function WithGraphQL(props) {
      var _a;
      const { fetchingPromise, unsubscribe } = useInterceptSelections({
        interceptorManager,
        eventHandler,
        scheduler,
        staleWhileRevalidate,
        onError
      });
      let returnValue = null;
      try {
        returnValue = (_a = component(props)) != null ? _a : null;
      } finally {
        unsubscribe();
      }
      if (suspense && fetchingPromise.current) {
        let Suspend = function() {
          if (!fetchingPromise.current)
            return null;
          throw fetchingPromise.current;
        };
        const value = /* @__PURE__ */ React.createElement(React.Fragment, null, returnValue, /* @__PURE__ */ React.createElement(Suspend, null));
        if (typeof suspense === "object") {
          return React.createElement(React.Suspense, {
            fallback: suspense.fallback,
            children: value
          });
        }
        return value;
      }
      return returnValue;
    };
    withGraphQL.displayName = `GraphQLComponent(${(component == null ? void 0 : component.displayName) || (component == null ? void 0 : component.name) || "Anonymous"})${Date.now}`;
    return withGraphQL;
  };
  return graphql;
}

export { createGraphqlHOC };
