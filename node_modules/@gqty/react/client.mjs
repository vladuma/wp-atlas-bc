import { createUseMetaState } from './meta/useMetaState.mjs';
import { createUseMutation } from './mutation/useMutation.mjs';
import { createGraphqlHOC } from './query/hoc.mjs';
import { createPrepareQuery } from './query/preparedQuery.mjs';
import { createUseLazyQuery } from './query/useLazyQuery.mjs';
import { createUseQuery } from './query/useQuery.mjs';
import { createUseRefetch } from './query/useRefetch.mjs';
import { createUseTransactionQuery } from './query/useTransactionQuery.mjs';
import { createSSRHelpers } from './ssr/ssr.mjs';
import { createUseSubscription } from './subscription/useSubscription.mjs';
import { createUsePaginatedQuery } from './query/usePaginatedQuery.mjs';

function createReactClient(client, optsCreate = {}) {
  const { suspense = false } = optsCreate.defaults || (optsCreate.defaults = {});
  const {
    transactionFetchPolicy = "cache-first",
    lazyFetchPolicy = "network-only",
    staleWhileRevalidate = false,
    retry = true,
    lazyQuerySuspense = false,
    transactionQuerySuspense = suspense,
    mutationSuspense = false,
    preparedSuspense = suspense,
    refetchAfterHydrate = false,
    paginatedQueryFetchPolicy = "cache-first",
    paginatedQuerySuspense = suspense
  } = optsCreate.defaults;
  const defaults = {
    transactionFetchPolicy,
    lazyFetchPolicy,
    staleWhileRevalidate,
    suspense,
    retry,
    lazyQuerySuspense,
    transactionQuerySuspense,
    mutationSuspense,
    preparedSuspense,
    refetchAfterHydrate,
    paginatedQueryFetchPolicy,
    paginatedQuerySuspense
  };
  const opts = Object.assign({}, optsCreate, {
    defaults
  });
  const state = new Proxy({
    isLoading: false
  }, {
    get(target, key, receiver) {
      if (key === "isLoading")
        return Boolean(client.scheduler.resolving);
      return Reflect.get(target, key, receiver);
    }
  });
  const { prepareReactRender, useHydrateCache } = createSSRHelpers(client, opts);
  return {
    useQuery: createUseQuery(client, opts),
    useRefetch: createUseRefetch(client, opts),
    useLazyQuery: createUseLazyQuery(client, opts),
    useTransactionQuery: createUseTransactionQuery(client, opts),
    usePaginatedQuery: createUsePaginatedQuery(client, opts),
    useMutation: createUseMutation(client, opts),
    graphql: createGraphqlHOC(client, opts),
    state,
    prepareReactRender,
    useHydrateCache,
    useMetaState: createUseMetaState(client),
    useSubscription: createUseSubscription(client),
    prepareQuery: createPrepareQuery(client, opts)
  };
}

export { createReactClient };
