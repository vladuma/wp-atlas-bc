import { LazyPromise } from 'gqty/Utils/promise';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useGenerateGQty(config) {
  const pluginDeps = LazyPromise(async () => {
    const [{ writeGenerate }, { config: gqtyConfig }, { defaultConfig }] = await Promise.all([
      import('./writeGenerate.mjs'),
      import('./config.mjs').then((v) => v.gqtyConfigPromise),
      import('./config.mjs')
    ]);
    return {
      writeGenerate,
      gqtyConfig,
      defaultConfig
    };
  });
  return {
    onSchemaChange({ schema }) {
      pluginDeps.then(({ gqtyConfig, writeGenerate, defaultConfig }) => {
        var _a;
        const _b = config || {}, {
          destination = (_a = gqtyConfig.destination) != null ? _a : defaultConfig.destination,
          onExistingFileConflict,
          transformsGenerate,
          onError = console.error
        } = _b, generateOptions = __objRest(_b, [
          "destination",
          "onExistingFileConflict",
          "transformsGenerate",
          "onError"
        ]);
        writeGenerate(schema, destination, __spreadValues(__spreadValues({}, gqtyConfig), generateOptions), onExistingFileConflict, transformsGenerate).catch(onError);
      }).catch((config == null ? void 0 : config.onError) || console.error);
    }
  };
}

export { useGenerateGQty };
