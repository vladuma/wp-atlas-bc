'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const fs = require('fs');
const graphql = require('graphql');
const path = require('path');
const config = require('./config.js');

async function inspectWriteGenerate({
  endpoint,
  destination,
  generateOptions,
  cli,
  headers,
  transformSchemaOptions
} = {}) {
  if (destination) {
    config.defaultConfig.destination = destination;
  }
  if (endpoint) {
    config.defaultConfig.introspection.endpoint = endpoint;
  } else if (fs.existsSync(path.resolve("./schema.gql"))) {
    endpoint = "./schema.gql";
    config.defaultConfig.introspection.endpoint = endpoint;
  } else {
    const { config: config$1, filepath } = await config.gqtyConfigPromise;
    const configIntrospectionEndpoint = config$1.introspection && config$1.introspection.endpoint;
    if (configIntrospectionEndpoint && configIntrospectionEndpoint !== config.DUMMY_ENDPOINT) {
      endpoint = configIntrospectionEndpoint;
    } else {
      console.error(`
Please modify "${filepath.endsWith("package.json") ? "gqty" : "config"}.introspection.endpoint" in: "${filepath}".`);
      throw Error("ERROR: No introspection endpoint specified in configuration file.");
    }
  }
  if (!destination) {
    const configDestination = (await config.gqtyConfigPromise).config.destination;
    destination = configDestination || config.defaultConfig.destination;
  }
  destination = path.resolve(destination);
  const genOptions = Object.assign({}, generateOptions);
  let schema;
  config.defaultConfig.introspection.endpoint = endpoint;
  config.defaultConfig.introspection.headers = headers || {};
  if (endpoint.startsWith("http://") || endpoint.startsWith("https://")) {
    schema = await (await Promise.resolve().then(function () { return require('./introspection.js'); })).getRemoteSchema(endpoint, {
      headers
    });
  } else {
    config.defaultConfig.introspection.endpoint = config.DUMMY_ENDPOINT;
    if (fs.existsSync(endpoint)) {
      const file = await fs.promises.readFile(endpoint, {
        encoding: "utf-8"
      });
      if (endpoint.endsWith(".json")) {
        const parsedFile = JSON.parse(file);
        let dataField;
        if (typeof parsedFile === "object") {
          if ("data" in parsedFile && parsedFile.data) {
            dataField = parsedFile.data;
          } else if ("__schema" in parsedFile) {
            dataField = parsedFile;
          }
        }
        if (!(typeof dataField === "object"))
          throw Error('Invalid JSON introspection result, expected "__schema" or "data.__schema" field.');
        schema = graphql.buildClientSchema(dataField);
      } else {
        schema = graphql.buildSchema(file);
      }
    } else {
      throw Error(`File "${endpoint}" doesn't exists. If you meant to inspect a GraphQL API, make sure to put http:// or https:// in front of it.`);
    }
  }
  const generatedPath = await (await Promise.resolve().then(function () { return require('./writeGenerate.js'); })).writeGenerate(schema, destination, genOptions, async (existingFile) => {
    var _a, _b;
    const subscriptions = (_a = genOptions.subscriptions) != null ? _a : (await config.gqtyConfigPromise).config.subscriptions;
    const react = (_b = genOptions.react) != null ? _b : (await config.gqtyConfigPromise).config.react;
    const advice = `
If you meant to change this, please remove "${destination}" and re-run code generation.`;
    if (subscriptions) {
      if (!existingFile.includes("createSubscriptionsClient")) {
        console.warn(`[Warning] You've changed the option "subscriptions" to 'true', which is different from your existing "${destination}".` + advice);
      }
    }
    if (react) {
      if (!existingFile.includes("createReactClient")) {
        console.warn(`[Warning] You've changed the option "react" to 'true', which is different from your existing "${destination}".` + advice);
      }
    }
    if (existingFile.includes("export const {")) {
      console.warn(`[Warning] To prevent possible bundling issues, it's recommended to change the export syntax from "export const { query, ... } = client;" to "const { query, ... } = client; export { query, ... };"`);
    }
  }, transformSchemaOptions);
  if (cli) {
    console.log("Code generated successfully at " + generatedPath);
  }
}

exports.inspectWriteGenerate = inspectWriteGenerate;
