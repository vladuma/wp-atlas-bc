import { ScalarsEnumsHash, Schema } from 'gqty';
import { GraphQLField, GraphQLSchema } from 'graphql';
export interface GenerateOptions {
    /**
     * The endpoint to use for the `queryFetcher` function
     */
    endpoint?: string;
    /**
     * Customize the TypeScript types for scalars.
     *
     * You can use the `preImport` option to import / define custom types.
     *
     * @example
     * ```json
     * scalarTypes: {
     *   DateTime: "string",
     * }
     * ```
     */
    scalarTypes?: Record<string, string>;
    /**
     * Prepend code to the schema file, useful with the `scalarTypes` option.
     */
    preImport?: string;
    /**
     * Generate React Client code
     */
    react?: boolean;
    /**
     * Define enums as string types instead of enums objects
     * @default false
     */
    enumsAsStrings?: boolean;
    /**
     * Generate subscriptions client
     * @default false
     */
    subscriptions?: boolean;
    /**
     * Generate Javascript code instead of TypeScript
     *
     * @default false
     */
    javascriptOutput?: boolean;
}
export interface TransformSchemaOptions {
    /**
     * Get a field in which every argument is optional, if this functions return "true", gqty will _always__ ignore it's arguments,
     * and you won't be able to specify them
     */
    ignoreArgs?: (type: GraphQLField<unknown, unknown>) => boolean;
}
export declare function generate(schema: GraphQLSchema, { preImport, scalarTypes, react, endpoint, enumsAsStrings, subscriptions, javascriptOutput, }?: GenerateOptions, { ignoreArgs }?: TransformSchemaOptions): Promise<{
    clientCode: string;
    schemaCode: string;
    javascriptSchemaCode: string;
    generatedSchema: Schema;
    scalarsEnumsHash: ScalarsEnumsHash;
    isJavascriptOutput: boolean;
}>;
