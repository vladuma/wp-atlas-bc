import type { GenerateOptions } from './generate';
import type { IntrospectionOptions } from './introspection';
export declare type GQtyConfig = Omit<GenerateOptions, 'endpoint'> & {
    /**
     * Introspection options
     */
    introspection?: IntrospectionOptions;
    /**
     * Client generation destination
     */
    destination?: string;
};
export declare const DUMMY_ENDPOINT = "SPECIFY_ENDPOINT_OR_SCHEMA_FILE_PATH_HERE";
export declare const defaultConfig: Required<GQtyConfig>;
export declare function getValidConfig(v: unknown): GQtyConfig;
declare type DeepReadonly<T> = T extends (infer R)[] ? DeepReadonlyArray<R> : T extends Function ? T : T extends object ? DeepReadonlyObject<T> : T;
interface DeepReadonlyArray<T> extends ReadonlyArray<DeepReadonly<T>> {
}
declare type DeepReadonlyObject<T> = {
    readonly [P in keyof T]: DeepReadonly<T[P]>;
};
export declare const gqtyConfigPromise: Promise<{
    filepath: string;
    config: DeepReadonly<GQtyConfig>;
}>;
export {};
