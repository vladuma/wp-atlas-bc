'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const crossFetch = require('cross-fetch');
const graphql = require('graphql');
const wrap = require('@graphql-tools/wrap');
const config = require('./config.js');

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const getRemoteSchema = async (endpoint, { headers } = {}) => {
  const executor = async ({ document, variables }) => {
    var _a;
    headers || (headers = ((_a = (await config.gqtyConfigPromise).config.introspection) == null ? void 0 : _a.headers) || config.defaultConfig.introspection.headers);
    const query = graphql.print(document);
    const fetchResult = await crossFetch.fetch(endpoint, {
      method: "POST",
      headers: __spreadValues({
        "Content-Type": "application/json"
      }, headers),
      body: JSON.stringify({ query, variables })
    });
    return fetchResult.json();
  };
  const schema = wrap.wrapSchema({
    schema: await wrap.introspectSchema(executor, {
      endpoint
    }),
    executor
  });
  return schema;
};

exports.getRemoteSchema = getRemoteSchema;
